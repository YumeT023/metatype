"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1053],{7942:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var a=n(959);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),d=s(n),c=r,k=d["".concat(o,".").concat(c)]||d[c]||u[c]||i;return n?a.createElement(k,l(l({ref:t},m),{},{components:n})):a.createElement(k,l({ref:t},m))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[d]="string"==typeof e?e:r,l[1]=p;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2391:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var a=n(1163),r=(n(959),n(7942));const i={sidebar_label:"prisma",title:"typegraph.providers.prisma.runtimes.prisma"},l=void 0,p={unversionedId:"reference/typegraph/typegraph/providers/prisma/runtimes/prisma",id:"reference/typegraph/typegraph/providers/prisma/runtimes/prisma",title:"typegraph.providers.prisma.runtimes.prisma",description:"PrismaRuntime Objects",source:"@site/docs/reference/typegraph/typegraph/providers/prisma/runtimes/prisma.md",sourceDirName:"reference/typegraph/typegraph/providers/prisma/runtimes",slug:"/reference/typegraph/typegraph/providers/prisma/runtimes/prisma",permalink:"/docs/reference/typegraph/typegraph/providers/prisma/runtimes/prisma",draft:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/reference/typegraph/typegraph/providers/prisma/runtimes/prisma.md",tags:[],version:"current",frontMatter:{sidebar_label:"prisma",title:"typegraph.providers.prisma.runtimes.prisma"},sidebar:"docs",previous:{title:"relations",permalink:"/docs/reference/typegraph/typegraph/providers/prisma/relations"},next:{title:"schema",permalink:"/docs/reference/typegraph/typegraph/providers/prisma/schema"}},o={},s=[{value:"PrismaRuntime Objects",id:"prismaruntime-objects",level:2},{value:"Models",id:"models",level:3},{value:"Relationships",id:"relationships",level:3},{value:"One-to-one relationships",id:"one-to-one-relationships",level:4},{value:"link",id:"link",level:4},{value:"raw_query",id:"raw_query",level:4},{value:"raw_execute",id:"raw_execute",level:4}],m={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"prismaruntime-objects"},"PrismaRuntime Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@frozen\nclass PrismaRuntime(Runtime)\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"A database ORM runtime.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," - Name of prisma runtime"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"connection_string_secret")," - Name of the secret that contains the connection string\nthat will be used to connect to the database")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'with TypeGraph("prisma-runtime-example") as g:\n    db = PrismaRuntime("main_db", "DB_CONNECTION")\n\n    user = t.struct(\n        {\n            "id": t.uuid().config("id", "auto"),\n            "email": t.email(),\n        }\n    )\n\n    g.expose(\n        createUser=db.create(user).add_policy(public)\n    )\n')),(0,r.kt)("h3",{id:"models"},"Models"),(0,r.kt)("p",null,"  Any ",(0,r.kt)("inlineCode",{parentName:"p"},"t.struct")," that is passed to a generator of a ",(0,r.kt)("inlineCode",{parentName:"p"},"PrismaRuntime"),"\ndefines a model.\nModels must have an ID field specified by the ",(0,r.kt)("inlineCode",{parentName:"p"},'"id"')," config."),(0,r.kt)("p",null,"  Here is the list of all the available configs for model fields:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Config"),(0,r.kt)("th",{parentName:"tr",align:null},"Effect"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:null},"defines the field ID for the model (a.k.a. primary key)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"auto")),(0,r.kt)("td",{parentName:"tr",align:null},"the value of this field can be auto generated; supported for ",(0,r.kt)("inlineCode",{parentName:"td"},"t.integer()")," (auto-increment) and ",(0,r.kt)("inlineCode",{parentName:"td"},"t.uuid()"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"unique")),(0,r.kt)("td",{parentName:"tr",align:null},"make this field unique among all instances of the model")))),(0,r.kt)("h3",{id:"relationships"},"Relationships"),(0,r.kt)("p",null,"  Relationship fields must be defined on both sides of the relationship.\nA relationship is always defined for ",(0,r.kt)("inlineCode",{parentName:"p"},"t.struct")," types and ",(0,r.kt)("inlineCode",{parentName:"p"},"t.optional")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"t.array")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"t.struct"),"s."),(0,r.kt)("p",null,"  Relatioships can also be defined implicitly using the ",(0,r.kt)("a",{parentName:"p",href:"#link"},(0,r.kt)("inlineCode",{parentName:"a"},"link"))," instance method\nof ",(0,r.kt)("inlineCode",{parentName:"p"},"PrismaRuntime"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'runtime = PrismaRuntime("example", "POSTGRES")\n\nuser = t.struct(\n    {\n        "id": t.uuid().config("id", "auto"),\n        "email": t.email().config("unique"),\n        "posts": t.array(g("Post")),\n    }\n).named("User")\n\npost = t.struct(\n    {\n        "id": t.uuid().config("id", "auto"),\n        "title": t.string(),\n        "author": g("User"),\n    }\n).named("Post")\n')),(0,r.kt)("p",null,"  The ",(0,r.kt)("inlineCode",{parentName:"p"},"PrismaRuntime")," supports two kinds of relationship between models."),(0,r.kt)("h4",{id:"one-to-one-relationships"},"One-to-one relationships"),(0,r.kt)("p",null,"  A one-to-one relationship must be in one of these two variants."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Cardinality"),(0,r.kt)("th",{parentName:"tr",align:null},"Field type in Model1"),(0,r.kt)("th",{parentName:"tr",align:null},"Field type in Model2"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1..1 \u2194 0..1"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'g("Model2")')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'g("Model1").optional()'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0..1 \u2194 0..1"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'g("Model2").optional()')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'g("Model1").optional()'))))),(0,r.kt)("p",null,"  For the optional (0..1 \u2194 0..1) one-to-one relationship,\nyou need to indicate on which field/model the foreign key will be by:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"wrapping the type in a ",(0,r.kt)("a",{parentName:"p",href:"#link"},(0,r.kt)("inlineCode",{parentName:"a"},"runtime.link(.)"))," with ",(0,r.kt)("inlineCode",{parentName:"p"},"fkey=True"),":\n",(0,r.kt)("inlineCode",{parentName:"p"},'runtime.link(g("Model2").optional(), fkey=True)'),";",(0,r.kt)("br",null))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"or adding ",(0,r.kt)("inlineCode",{parentName:"p"},'.config("unique")'),": ",(0,r.kt)("inlineCode",{parentName:"p"},'g("Model2").optional().config("unique")'),"."),(0,r.kt)("h4",{parentName:"li",id:"one-to-many-relationships"},"One-to-many relationships"),(0,r.kt)("p",{parentName:"li"},"A one-to-many relationship must be in one of these two variants."),(0,r.kt)("table",{parentName:"li"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Cardinality"),(0,r.kt)("th",{parentName:"tr",align:null},"Field type in Model1"),(0,r.kt)("th",{parentName:"tr",align:null},"Field type in Model2"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1..1 \u2194 0..n"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'g("Model2")')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'t.array(g("Model1"))'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0..1 \u2194 0..n"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'g("Model2").optional()')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'t.array(g("Model1"))'))))),(0,r.kt)("h3",{parentName:"li",id:"generators"},"Generators"),(0,r.kt)("p",{parentName:"li"},"Generators are instance methods of ",(0,r.kt)("inlineCode",{parentName:"p"},"PrismaRuntime")," that can be used\nto generate a ",(0,r.kt)("inlineCode",{parentName:"p"},"t.func")," that represents a specific operation on a specific\nmodel of the runtime.\nThey match to the model queries defined for the\n",(0,r.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/reference/api-reference/prisma-client-reference"},"prisma client API"),".\nfor the type of the input ",(0,r.kt)("inlineCode",{parentName:"p"},"t.struct")," and the return type."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'with TypeGraph("prisma-runtime-example") as g:\n    db = PrismaRuntime("main_db", "DB_CONNECTION")\n\n    user = t.struct(\n        {\n            "id": t.uuid().config("id", "auto"),\n            "email": t.email(),\n        }\n    )\n\n    g.expose(\n        createUser=db.create(user).add_policy(public),\n        findUser=db.find_unique(user).add_policy(public),\n        findManyUsers=db.find_many(user).add_policy(public),\n    )\n')),(0,r.kt)("p",null,"  Here is a list of all available generators:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"find_unique")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"find_many")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"create")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"update")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"delete")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"delete_many"))),(0,r.kt)("h4",{id:"link"},"link"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def link(typ: Union[t.TypeNode, str],\n         name: Optional[str] = None,\n         *,\n         field: Optional[str] = None,\n         fkey: Optional[bool] = None) -> t.TypeNode\n")),(0,r.kt)("p",null,"Explicitly declare a relationship between models. The return value of\nthis function shall be the type of a property of a ",(0,r.kt)("inlineCode",{parentName:"p"},"t.struct")," that\ndefines a model.\nIf the other end of the relationship is also defined using ",(0,r.kt)("inlineCode",{parentName:"p"},"link"),",\nboth links must have the same name."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," - name of the relationship"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"field")," - name of the target field on the target model")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'runtime = PrismaRuntime("example", "POSTGRES")\n\nuser = t.struct(\n    {\n        "id": t.uuid().config("id", "auto"),\n        "email": t.email().config("unique"),\n        "posts": runtime.link(t.array(g("Post")), "postAuthor"),\n    }\n).named("User")\n\npost = t.struct(\n    {\n        "id": t.uuid().config("id", "auto"),\n        "title": t.string(),\n        "author": runtime.link(g("User"), "postAuthor"),\n    }\n).named("Post")\n')),(0,r.kt)("h4",{id:"raw_query"},"raw","_","query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def raw_query(query: str, out: t.TypeNode, *, effect: Effect) -> t.func\n")),(0,r.kt)("p",null,"Generate a raw SQL query operation on the runtime"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'db = PrismaRuntime("my-app", "POSTGRES")\ng.expose(\n    countUsers=db.raw_query("SELECT COUNT(*) FROM User", t.integer())\n)\n')),(0,r.kt)("h4",{id:"raw_execute"},"raw","_","execute"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def raw_execute(query: str, *, effect: Effect) -> t.func\n")),(0,r.kt)("p",null,"Generate a raw SQL query operation without return"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'db = PrismaRuntime("my-app", "POSTGRES")\ng.expose(\n    setActive=db.raw_execute("UPDATE User SET active = TRUE WHERE id=$1", effect=effects.update()),\n)\n')))}u.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1053],{5078:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>o});var a=n(1163),r=(n(959),n(7942));const i={sidebar_label:"prisma",title:"typegraph.providers.prisma.runtimes.prisma"},l=void 0,p={unversionedId:"reference/typegraph/typegraph/providers/prisma/runtimes/prisma",id:"reference/typegraph/typegraph/providers/prisma/runtimes/prisma",title:"typegraph.providers.prisma.runtimes.prisma",description:"PrismaRuntime Objects",source:"@site/docs/reference/typegraph/typegraph/providers/prisma/runtimes/prisma.md",sourceDirName:"reference/typegraph/typegraph/providers/prisma/runtimes",slug:"/reference/typegraph/typegraph/providers/prisma/runtimes/prisma",permalink:"/docs/reference/typegraph/typegraph/providers/prisma/runtimes/prisma",draft:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/reference/typegraph/typegraph/providers/prisma/runtimes/prisma.md",tags:[],version:"current",frontMatter:{sidebar_label:"prisma",title:"typegraph.providers.prisma.runtimes.prisma"},sidebar:"docs",previous:{title:"relations",permalink:"/docs/reference/typegraph/typegraph/providers/prisma/relations"},next:{title:"temporal",permalink:"/docs/reference/typegraph/typegraph/providers/temporal/runtimes/temporal"}},s={},o=[{value:"PrismaRuntime Objects",id:"prismaruntime-objects",level:2},{value:"Models",id:"models",level:3},{value:"Relationships",id:"relationships",level:3},{value:"Generators",id:"generators",level:3},{value:"link",id:"link",level:4},{value:"queryRaw",id:"queryraw",level:4},{value:"executeRaw",id:"executeraw",level:4}],m={toc:o},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"prismaruntime-objects"},"PrismaRuntime Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@frozen\nclass PrismaRuntime(Runtime)\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"A database ORM runtime.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," - Name of prisma runtime"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"connection_string_secret")," - Name of the secret that contains the connection string\nthat will be used to connect to the database")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'with TypeGraph("prisma-runtime-example") as g:\n    db = PrismaRuntime("main_db", "DB_CONNECTION")\n\n    user = t.struct(\n        {\n            "id": t.uuid().config("id", "auto"),\n            "email": t.email(),\n        }\n    )\n\n    g.expose(\n        createUser=db.create(user).add_policy(public)\n    )\n')),(0,r.kt)("h3",{id:"models"},"Models"),(0,r.kt)("p",null,"  Any ",(0,r.kt)("inlineCode",{parentName:"p"},"t.struct")," that is passed to a generator of a ",(0,r.kt)("inlineCode",{parentName:"p"},"PrismaRuntime"),"\ndefines a model.\nModels must have an ID field specified by the ",(0,r.kt)("inlineCode",{parentName:"p"},'"id"')," config."),(0,r.kt)("p",null,"  Here is the list of all the available configs for model fields:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Config"),(0,r.kt)("th",{parentName:"tr",align:null},"Effect"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:null},"defines the field ID for the model (a.k.a. primary key)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"auto")),(0,r.kt)("td",{parentName:"tr",align:null},"the value of this field can be auto generated; supported for ",(0,r.kt)("inlineCode",{parentName:"td"},"t.integer()")," (auto-increment) and ",(0,r.kt)("inlineCode",{parentName:"td"},"t.uuid()"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"unique")),(0,r.kt)("td",{parentName:"tr",align:null},"make this field unique among all instances of the model")))),(0,r.kt)("h3",{id:"relationships"},"Relationships"),(0,r.kt)("p",null,"  The ",(0,r.kt)("inlineCode",{parentName:"p"},"PrismaRuntime")," supports two kinds of relationship between models."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Relationship"),(0,r.kt)("th",{parentName:"tr",align:null},"Field type in Model1"),(0,r.kt)("th",{parentName:"tr",align:null},"Field type in Model2"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"One to one"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'g("Model2")')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'g("Model1").optional()'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"One to many"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'g("Model2")')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'t.array(g("Model1"))'))))),(0,r.kt)("p",null,"  Relationship fields must be defined on both sides of the relationship.\nA relationship is always defined for ",(0,r.kt)("inlineCode",{parentName:"p"},"t.struct")," types and ",(0,r.kt)("inlineCode",{parentName:"p"},"t.optional")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"t.array")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"t.struct"),"s."),(0,r.kt)("p",null,"  Relatioships can also be defined implicitly using the ",(0,r.kt)("inlineCode",{parentName:"p"},"link")," instance method\nof ",(0,r.kt)("inlineCode",{parentName:"p"},"PrismaRuntime"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'runtime = PrismaRuntime("example", "POSTGRES")\n\nuser = t.struct(\n    {\n        "id": t.uuid().config("id", "auto"),\n        "email": t.email().config("unique"),\n        "posts": t.array(g("Post")),\n    }\n).named("User")\n\npost = t.struct(\n    {\n        "id": t.uuid().config("id", "auto"),\n        "title": t.string(),\n        "author": g("User"),\n    }\n).named("Post")\n')),(0,r.kt)("h3",{id:"generators"},"Generators"),(0,r.kt)("p",null,"  Generators are instance methods of ",(0,r.kt)("inlineCode",{parentName:"p"},"PrismaRuntime")," that can be used\nto generate a ",(0,r.kt)("inlineCode",{parentName:"p"},"t.func")," that represents a specific operation on a specific\nmodel of the runtime.\nThey match to the model queries defined for the\n",(0,r.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/reference/api-reference/prisma-client-reference"},"prisma client API"),".\nfor the type of the input ",(0,r.kt)("inlineCode",{parentName:"p"},"t.struct")," and the return type."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'with TypeGraph("prisma-runtime-example") as g:\n    db = PrismaRuntime("main_db", "DB_CONNECTION")\n\n    user = t.struct(\n        {\n            "id": t.uuid().config("id", "auto"),\n            "email": t.email(),\n        }\n    )\n\n    g.expose(\n        createUser=db.create(user).add_policy(public),\n        findUser=db.find_unique(user).add_policy(public),\n        findManyUsers=db.find_many(user).add_policy(public),\n    )\n')),(0,r.kt)("p",null,"  Here is a list of all available generators:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"find_unique")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"find_many")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"create")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"update")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"delete")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"delete_many"))),(0,r.kt)("h4",{id:"link"},"link"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def link(typ: Union[t.TypeNode, str],\n         name: str,\n         field: Optional[str] = None) -> t.TypeNode\n")),(0,r.kt)("p",null,"Explicitly declare a relationship between models. The return value of\nthis function shall be the type of a property of a ",(0,r.kt)("inlineCode",{parentName:"p"},"t.struct")," that\ndefines a model.\nIf the other end of the relationship is also defined using ",(0,r.kt)("inlineCode",{parentName:"p"},"link"),",\nboth links must have the same name."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," - name of the relationship"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"field")," - name of the target field on the target model")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'runtime = PrismaRuntime("example", "POSTGRES")\n\nuser = t.struct(\n    {\n        "id": t.uuid().config("id", "auto"),\n        "email": t.email().config("unique"),\n        "posts": runtime.link(t.array(g("Post")), "postAuthor"),\n    }\n).named("User")\n\npost = t.struct(\n    {\n        "id": t.uuid().config("id", "auto"),\n        "title": t.string(),\n        "author": runtime.link(g("User"), "postAuthor"),\n    }\n).named("Post")\n')),(0,r.kt)("h4",{id:"queryraw"},"queryRaw"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def queryRaw(query: str, *, effect: Effect) -> t.func\n")),(0,r.kt)("p",null,"Generate a raw SQL query operation"),(0,r.kt)("h4",{id:"executeraw"},"executeRaw"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def executeRaw(query: str, *, effect: Effect) -> t.func\n")),(0,r.kt)("p",null,"Generate a raw SQL query operation without return"))}u.isMDXComponent=!0}}]);
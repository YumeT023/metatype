(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8118],{6986:(e,t,n)=>{"use strict";n.d(t,{Z:()=>c});var a=n(959),i=n(3268),r=n(715),o=n(7114),l=n(9037);const s={container:"container_KHaM",panel:"panel_p8cl",editor:"editor_LjJP",response:"response_Ger1",tool:"tool_nUFu",notool:"notool_i7V8"},d=e=>{e.getWrapperElement().closest(".graphiql-editor").style.height=`${e.doc.height}px`};function m(e){const{queryEditor:t,variableEditor:n,headerEditor:i}=(0,l._i)({nonNull:!0}),[r,o]=(0,a.useState)(e.defaultTab),m=(0,l.Xd)({onCopyQuery:e.onCopyQuery}),p=(0,l.fE)();return(0,a.useEffect)((()=>{n&&d(n)}),[r,n]),(0,a.useEffect)((()=>{i&&d(i)}),[r,i]),(0,a.useEffect)((()=>{t&&(t.setOption("lineNumbers",!1),t.setOption("gutters",[]),t.on("change",d),d(t))}),[t]),(0,a.useEffect)((()=>{n&&(n.setOption("lineNumbers",!1),n.setOption("gutters",[]),n.on("change",d))}),[n]),(0,a.useEffect)((()=>{i&&(i.setOption("lineNumbers",!1),i.setOption("gutters",[]),i.on("change",d))}),[i]),a.createElement("div",{className:"graphiql-editors"},a.createElement("section",{className:"graphiql-query-editor","aria-label":"Query Editor"},a.createElement("div",{className:"graphiql-query-editor-wrapper"},a.createElement(l.WK,{editorTheme:e.editorTheme,keyMap:e.keyMap,onCopyQuery:e.onCopyQuery,onEdit:e.onEditQuery,readOnly:e.readOnly})),a.createElement("div",{className:"graphiql-toolbar",role:"toolbar","aria-label":"Editor Commands"},a.createElement(l._8,null),a.createElement(l.wC,{onClick:()=>p(),label:"Prettify query (Shift-Ctrl-P)"},a.createElement(l.Kt,{className:"graphiql-toolbar-icon","aria-hidden":"true"})),a.createElement(l.wC,{onClick:()=>m(),label:"Copy query (Shift-Ctrl-C)"},a.createElement(l.TI,{className:"graphiql-toolbar-icon","aria-hidden":"true"})))),a.createElement("div",{className:"graphiql-editor-tools"},a.createElement("div",{className:"graphiql-editor-tools-tabs"},a.createElement(l.v0,{type:"button",className:"variables"===r?"active":"",onClick:()=>{o("variables"===r?"":"variables")}},"Variables"),a.createElement(l.v0,{type:"button",className:"headers"===r?"active":"",onClick:()=>{o("headers"===r?"":"headers")}},"Headers"))),a.createElement("section",{className:`graphiql-editor-tool ${r&&r.length>0?s.tool:s.notool}`,"aria-label":"variables"===r?"Variables":"Headers"},a.createElement(l.hF,{editorTheme:e.editorTheme,isHidden:"variables"!==r,keyMap:e.keyMap,onEdit:e.onEditVariables,readOnly:e.readOnly}),a.createElement(l.LA,{editorTheme:e.editorTheme,isHidden:"headers"!==r,keyMap:e.keyMap,onEdit:e.onEditHeaders,readOnly:e.readOnly})))}class p{constructor(){this.map=new Map,this.length=0}getItem(e){return this.map.get(e)}setItem(e,t){this.map.has(e)||(this.length+=1),this.map.set(e,t)}removeItem(e){this.map.has(e)&&(this.length-=1),this.map.delete(e)}clear(){this.length=0,this.map.clear()}}function u(){return(0,l.JB)({nonNull:!0}).isFetching?a.createElement(l.$j,null):null}function c(e){let{typegraph:t,query:n,panel:d=null,headers:c={},variables:g={},tab:h=""}=e;const{siteConfig:{customFields:{tgUrl:k}}}=(0,o.Z)(),f=(0,a.useMemo)((()=>new p),[]);return a.createElement(r.Z,{fallback:a.createElement("div",null,"Loading...")},(()=>{const e=(0,a.useMemo)((()=>(0,i.nq)({url:`${k}/${t}`})),[]);return a.createElement(l.j$,{fetcher:e,defaultQuery:n.loc.source.body.trim(),defaultHeaders:JSON.stringify(c),variables:JSON.stringify(g),storage:f},a.createElement("div",{className:`graphiql-container ${s.container}`},d?a.createElement("div",{className:`graphiql-response ${s.panel}`},d):null,a.createElement("div",{className:`graphiql-session ${s.editor}`},a.createElement(m,{defaultTab:h})),a.createElement("div",{className:`graphiql-response ${s.response}`},a.createElement(u,null),a.createElement(l.iB,null))))}))}},9688:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var a=n(1163),i=n(6986),r=n(9107),o=n(959);function l(e){let{python:t,...n}=e;return o.createElement(i.Z,(0,a.Z)({panel:o.createElement(r.Z,{language:"python"},t)},n))}},4283:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>g,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=n(1163),i=(n(959),n(7942)),r=n(9688),o=n(9107);const l={sidebar_position:4},s="Import your API blocks",d={unversionedId:"tutorials/import-your-api-blocks/index",id:"tutorials/import-your-api-blocks/index",title:"Import your API blocks",description:"Lets summarize how far you progress made towards the chat-based app. The APIs should offer the following functionalities:",source:"@site/docs/tutorials/import-your-api-blocks/index.mdx",sourceDirName:"tutorials/import-your-api-blocks",slug:"/tutorials/import-your-api-blocks/",permalink:"/docs/tutorials/import-your-api-blocks/",draft:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/tutorials/import-your-api-blocks/index.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docs",previous:{title:"Adding more runtimes",permalink:"/docs/tutorials/adding-more-runtimes/"},next:{title:"Authentication and security",permalink:"/docs/tutorials/authentication-and-security/"}},m={},p=[{value:"Google importers",id:"google-importers",level:2},{value:"Effects",id:"effects",level:2}],u={toc:p},c="wrapper";function g(e){let{components:t,...l}=e;return(0,i.kt)(c,(0,a.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"import-your-api-blocks"},"Import your API blocks"),(0,i.kt)("p",null,"Lets summarize how far you progress made towards the chat-based app. The APIs should offer the following functionalities:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"list messages \u2705"),(0,i.kt)("li",{parentName:"ul"},"create a message \u2705"),(0,i.kt)("li",{parentName:"ul"},"retrieve the user from a message \u2705"),(0,i.kt)("li",{parentName:"ul"},"send a notification to all users when there is a new message \ud83d\udd63"),(0,i.kt)("li",{parentName:"ul"},"authentication and rate-limit the call \ud83d\udd63"),(0,i.kt)("li",{parentName:"ul"},"add access control \ud83d\udd63"),(0,i.kt)("li",{parentName:"ul"},"some business logic \ud83d\udd63")),(0,i.kt)("p",null,"For the notifications, Google offer a ",(0,i.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/reference/fcm/rest"},"Firebase Cloud Messaging")," (FCM) API which supports push on iOS, Android and web. Sadly as most of Google service, they don't provide an OpenAPI specification or a friendly GraphQL API. Rather they developed their own API definition files called API Discovery Service which maps incoming REST request onto their internal GRPC implementation, but this is a digression."),(0,i.kt)("h2",{id:"google-importers"},"Google importers"),(0,i.kt)("p",null,"The typegraph module comes with some handy importers to avoid having to rewrite manually all types and materializers. Currently, it supports importers for OpenAPI, GraphQL API and Google APIs."),(0,i.kt)("admonition",{title:"Beta/unstable feature",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Importers are quite recent and may require some different shapes depending on your needs. Your voice and use cases matter a lot, let Metatype community know what suits you the best in this ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/metatypedev/metatype/discussions/104"},"discussion"),".")),(0,i.kt)("p",null,"Importers are function call with a boolean re-writing the source code file where they live. As they can generate quite long type definition, the best practice is to separate them into a dedicated file that can be imported into your main typegraph. Lets create ",(0,i.kt)("inlineCode",{parentName:"p"},"google.py")," and run ",(0,i.kt)("inlineCode",{parentName:"p"},"python google.py")," to generate the types."),(0,i.kt)(o.Z,{language:"python",mdxType:"CodeBlock"},n(4764)),(0,i.kt)("p",null,"This should generate something like this:"),(0,i.kt)(o.Z,{language:"python",mdxType:"CodeBlock"},n(4566)),(0,i.kt)("p",null,"And can be imported/customized in your main typegraph file:"),(0,i.kt)(r.Z,{typegraph:"fcm",python:n(2560),query:n(4185),mdxType:"TGExample"}),(0,i.kt)("h2",{id:"effects"},"Effects"),(0,i.kt)("p",null,"Effects are a property of materializers and help categorization what happens to data when it gets transformed. Although they are similar to REST verbs and SQL statements, there is no direct one-to-one mapping."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Effects"),(0,i.kt)("th",{parentName:"tr",align:null},"REST verbs"),(0,i.kt)("th",{parentName:"tr",align:null},"SQL statements"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"none")),(0,i.kt)("td",{parentName:"tr",align:null},"GET"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"SELECT"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"create")),(0,i.kt)("td",{parentName:"tr",align:null},"POST"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"INSERT"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"update")),(0,i.kt)("td",{parentName:"tr",align:null},"PUT/PATCH"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"UPDATE"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"upsert")),(0,i.kt)("td",{parentName:"tr",align:null},"PUT"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"INSERT ON CONFLICT"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"delete")),(0,i.kt)("td",{parentName:"tr",align:null},"DELETE"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"DELETE"))))),(0,i.kt)("p",null,"They provide hints to the typegates for the query orchestration by splitting the queries and mutations. For example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"create")," effect is exposed as a mutation. They also allow to set different policies based on them, that's for the next page."))}g.isMDXComponent=!0},4185:e=>{var t={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"A"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"projectsMessagesSend"},arguments:[{kind:"Argument",name:{kind:"Name",value:"parent"},value:{kind:"StringValue",value:"projects/<project-id>",block:!1}},{kind:"Argument",name:{kind:"Name",value:"auth"},value:{kind:"StringValue",value:"<bearer_token>",block:!1}},{kind:"Argument",name:{kind:"Name",value:"validateOnly"},value:{kind:"BooleanValue",value:!0}},{kind:"Argument",name:{kind:"Name",value:"message"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"notification"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"title"},value:{kind:"StringValue",value:"FCM Message",block:!1}},{kind:"ObjectField",name:{kind:"Name",value:"body"},value:{kind:"StringValue",value:"This is an FCM Message",block:!1}}]}},{kind:"ObjectField",name:{kind:"Name",value:"token"},value:{kind:"StringValue",value:"<token>",block:!1}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"name"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"error"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"code"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"message"},arguments:[],directives:[]}]}}]}}]}},{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"B"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"user"},arguments:[{kind:"Argument",name:{kind:"Name",value:"id"},value:{kind:"IntValue",value:"1"}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"name"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:421}};t.loc.source={body:'mutation A {\n  projectsMessagesSend(\n    parent: "projects/<project-id>",\n    auth: "<bearer_token>",\n    # test with a fake message\n    validateOnly: true,\n    message: {\n      notification: {\n          title: "FCM Message",\n          body: "This is an FCM Message"\n      },\n      # recipient\n      token: "<token>" \n    }\n  ) {\n    name\n    error { code message }\n  }\n}\n\nquery B {\n  user(id: 1) {\n    id\n    name\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};function n(e,t){if("FragmentSpread"===e.kind)t.add(e.name.value);else if("VariableDefinition"===e.kind){var a=e.type;"NamedType"===a.kind&&t.add(a.name.value)}e.selectionSet&&e.selectionSet.selections.forEach((function(e){n(e,t)})),e.variableDefinitions&&e.variableDefinitions.forEach((function(e){n(e,t)})),e.definitions&&e.definitions.forEach((function(e){n(e,t)}))}var a={};function i(e,t){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==t)return a}}function r(e,t){var n={kind:e.kind,definitions:[i(e,t)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var r=a[t]||new Set,o=new Set,l=new Set;for(r.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){o.has(e)||(o.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return o.forEach((function(t){var a=i(e,t);a&&n.definitions.push(a)})),n}t.definitions.forEach((function(e){if(e.name){var t=new Set;n(e,t),a[e.name.value]=t}})),e.exports=t,e.exports.A=r(t,"A"),e.exports.B=r(t,"B")},2560:e=>{e.exports='# highlight-next-line\nfrom google import import_googleapi  # noqa: E402\n\nwith TypeGraph(\n  "fcm",\n) as g:\n  db = PrismaRuntime("database", "POSTGRES_CONN")\n  gql = GraphQLRuntime("https://graphqlzero.almansi.me/api")\n  public = policies.public()\n\n  user = t.struct({"id": t.string(), "name": t.string()}).named("user")\n\n  message = t.struct(\n    {\n      "id": t.integer().config("id", "auto"),\n      "title": t.string(),\n    }\n  ).named("message")\n\n  googleapi = import_googleapi()\n\n  g.expose(\n    create_message=db.insert_one(message),\n    list_messages=db.find_many(message),\n    users=gql.query(t.struct({}), t.struct({"data": t.array(user)})),\n    user=gql.query(t.struct({"id": t.integer()}), user),\n    **googleapi.functions,\n    default_policy=[public],\n  )'},4566:e=>{e.exports='from typegraph.runtimes.http import HTTPRuntime\nfrom typegraph.importers.base.importer import Import\nfrom typegraph import t\n\n  # ...\n  types["MessageIn"] = t.struct(\n    {\n      "notification": t.proxy(renames["NotificationIn"]).optional(),\n      "condition": t.string().optional(),\n      "webpush": t.proxy(renames["WebpushConfigIn"]).optional(),\n      "name": t.string().optional(),\n      "topic": t.string().optional(),\n      "android": t.proxy(renames["AndroidConfigIn"]).optional(),\n      "token": t.string().optional(),\n      "fcmOptions": t.proxy(renames["FcmOptionsIn"]).optional(),\n      "data": t.struct({}).optional(),\n      "apns": t.proxy(renames["ApnsConfigIn"]).optional(),\n    }\n  ).named(renames["MessageIn"])\n  # ...'},4764:e=>{e.exports='from typegraph.graph.typegraph import TypeGraph\nfrom typegraph.importers.google_discovery import GoogleDiscoveryImporter\n\nGoogleDiscoveryImporter(\n  "googleapi", url="https://fcm.googleapis.com/$discovery/rest?version=v1"\n).imp(False)\n\nwith TypeGraph(name="google-test"):\n  pass'}}]);
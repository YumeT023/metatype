"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6574],{7942:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(959);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(r),y=o,f=m["".concat(c,".").concat(y)]||m[y]||u[y]||a;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=y;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[m]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},9012:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=r(2564),o=(r(959),r(7942));const a={},i="Ecosystem repositories",s={unversionedId:"reference/ecosystem",id:"reference/ecosystem",title:"Ecosystem repositories",description:"Metatype",source:"@site/docs/reference/ecosystem.mdx",sourceDirName:"reference",slug:"/reference/ecosystem",permalink:"/docs/reference/ecosystem",draft:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/reference/ecosystem.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Scalars",permalink:"/docs/reference/typegate/typegate/scalars"},next:{title:"Configuration file",permalink:"/docs/reference/configuration-file"}},c={},l=[{value:"Metatype",id:"metatype",level:2},{value:"Whiz",id:"whiz",level:2},{value:"Lade",id:"lade",level:2},{value:"Python WASI reactor",id:"python-wasi-reactor",level:2}],p={toc:l},m="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(m,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"ecosystem-repositories"},"Ecosystem repositories"),(0,o.kt)("h2",{id:"metatype"},"Metatype"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/metatypedev/metatype"},"Metatype")," is the principal repository of the Metatype ecosystem. It contains the Meta CLI, the typegate and the typegraph components."),(0,o.kt)("h2",{id:"whiz"},"Whiz"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/zifeo/whiz"},"Whiz")," is a modern DAG/tasks runner for multi-platform monorepos. It enables to develop the core components of the ecosystem together and reloading only the necessary tasks on file change."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://github.com/zifeo/whiz/blob/main/demo.gif?raw=true",alt:"Whiz demo"})),(0,o.kt)("h2",{id:"lade"},"Lade"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/zifeo/lade"},"Lade")," automatically load secrets from your preferred vault as environment variables, and clear them once your shell command is over. The Meta CLI bundles Lade and use it to load secret seamlessly into your typegates."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://github.com/zifeo/lade/blob/main/examples/demo.gif?raw=true",alt:"Lade demo"})),(0,o.kt)("h2",{id:"python-wasi-reactor"},"Python WASI reactor"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/metatypedev/python-wasi-reactor"},"Python WASI reactor")," is one of the runtimes bundled into the typegate. It allows to run Python scripts as WASI modules on the fly."))}u.isMDXComponent=!0}}]);
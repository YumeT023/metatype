"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[994],{7942:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(959);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=l(r),d=o,y=m["".concat(s,".").concat(d)]||m[d]||u[d]||a;return r?n.createElement(y,i(i({ref:t},c),{},{components:r})):n.createElement(y,i({ref:t},c))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1479:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var n=r(4250),o=(r(959),r(7942));const a={},i="Quickstart",p={unversionedId:"tutorials/quickstart",id:"tutorials/quickstart",title:"Quickstart",description:"For concepts, head over to the overview to dig into the ecosystem.",source:"@site/docs/tutorials/quickstart.mdx",sourceDirName:"tutorials",slug:"/tutorials/quickstart",permalink:"/docs/tutorials/quickstart",draft:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/tutorials/quickstart.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorials",previous:{title:"Learn",permalink:"/docs/tutorials/learn/"},next:{title:"Tutorial extra",permalink:"/docs/tutorials/tutorial-extras/"}},s={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Set up the environment",id:"set-up-the-environment",level:2},{value:"Prepare dependencies",id:"prepare-dependencies",level:2},{value:"Create your first typegraph",id:"create-your-first-typegraph",level:2}],c={toc:l};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"quickstart"},"Quickstart"),(0,o.kt)("admonition",{title:"Looking for more explanations?",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"For concepts, head over to the ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/overview"},"overview")," to dig into the ecosystem.")),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"You need Python 3.10 with Poetry 1.2 or higher. Docker is recommended for development."),(0,o.kt)("h2",{id:"set-up-the-environment"},"Set up the environment"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'python3.10 -m venv .venv\ncat <<EOF > pyproject.toml\n[tool.poetry]\nname = "example"\nversion = "0.1.0"\ndescription = ""\nauthors = []\n\n[tool.poetry.dependencies]\nnative = {path = "native-0.1.0-cp310-cp310-linux_x86_64.whl"}\ntypegraph = {path = "typegraph-0.1.0-py3-none-any.whl"}\n\n[tool.poetry.dev-dependencies]\nblack = "^22.3.0"\n\n[build-system]\nrequires = ["poetry-core"]\nbuild-backend = "poetry.core.masonry.api"\nEOF\npoetry install\npoetry shell  # activate virtual environment\nmeta info\n')),(0,o.kt)("h2",{id:"prepare-dependencies"},"Prepare dependencies"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'cat <<EOF > docker-compose.yml\nservices:\n\n  typegate:\n    image: registry.zifeo.com/metatype/metatype:latest\n    ports:\n      - "7890:7890"\n    extra_hosts:\n      - "host.docker.internal:host-gateway"\n    environment:\n      REDIS_URL: redis://:password@redis:6379/0\n\n  redis:\n    image: redis:7\n    command: --requirepass password\n\n  postgres:\n    image: postgres:14\n    ports:\n      - "5432:5432"\n    environment:\n      POSTGRES_DB: db\n      POSTGRES_PASSWORD: password\nEOF\ndocker compose up -d\ndocker compose logs -f\n')),(0,o.kt)("h2",{id:"create-your-first-typegraph"},"Create your first typegraph"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'from typegraph.graphs.typegraph import TypeGraph\nfrom typegraph.materializers import worker\nfrom typegraph.materializers.graphql import GraphQLRuntime\nfrom typegraph.types import types as t\n\nwith TypeGraph("mini") as g:\n\n    remote = GraphQLRuntime("https://graphqlzero.almansi.me/api")\n\n    allow_all = t.policy(\n        t.struct(),\n        worker.JavascriptMat(\n            worker.JavascriptMat.lift(lambda args: True),\n            "policy",\n        ),\n    ).named("allow_all_policy")\n\n    post = t.struct(\n        {\n            "id": t.integer(),\n            "title": t.string(),\n            "body": t.string(),\n        }\n    ).named("Post")\n\n    getter = remote.query(t.struct({"id": t.integer()}), t.optional(post)).add_policy(\n        allow_all\n    )\n\n    g.expose(post=getter)\n\n')))}u.isMDXComponent=!0}}]);
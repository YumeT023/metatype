(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2945],{6986:(e,t,n)=>{"use strict";n.d(t,{Z:()=>p});var i=n(959),a=n(3268),r=n(715),s=n(7114),o=n(9037);const l={container:"container_KHaM",panel:"panel_p8cl",editor:"editor_LjJP",response:"response_Ger1",tool:"tool_nUFu",notool:"notool_i7V8"},d=e=>{e.getWrapperElement().closest(".graphiql-editor").style.height=`${e.doc.height}px`};function m(e){const{queryEditor:t,variableEditor:n,headerEditor:a}=(0,o._i)({nonNull:!0}),[r,s]=(0,i.useState)(e.defaultTab),m=(0,o.Xd)({onCopyQuery:e.onCopyQuery}),u=(0,o.fE)();return(0,i.useEffect)((()=>{n&&d(n)}),[r,n]),(0,i.useEffect)((()=>{a&&d(a)}),[r,a]),(0,i.useEffect)((()=>{t&&(t.setOption("lineNumbers",!1),t.setOption("gutters",[]),t.on("change",d),d(t))}),[t]),(0,i.useEffect)((()=>{n&&(n.setOption("lineNumbers",!1),n.setOption("gutters",[]),n.on("change",d))}),[n]),(0,i.useEffect)((()=>{a&&(a.setOption("lineNumbers",!1),a.setOption("gutters",[]),a.on("change",d))}),[a]),i.createElement("div",{className:"graphiql-editors"},i.createElement("section",{className:"graphiql-query-editor","aria-label":"Query Editor"},i.createElement("div",{className:"graphiql-query-editor-wrapper"},i.createElement(o.WK,{editorTheme:e.editorTheme,keyMap:e.keyMap,onCopyQuery:e.onCopyQuery,onEdit:e.onEditQuery,readOnly:e.readOnly})),i.createElement("div",{className:"graphiql-toolbar",role:"toolbar","aria-label":"Editor Commands"},i.createElement(o._8,null),i.createElement(o.wC,{onClick:()=>u(),label:"Prettify query (Shift-Ctrl-P)"},i.createElement(o.Kt,{className:"graphiql-toolbar-icon","aria-hidden":"true"})),i.createElement(o.wC,{onClick:()=>m(),label:"Copy query (Shift-Ctrl-C)"},i.createElement(o.TI,{className:"graphiql-toolbar-icon","aria-hidden":"true"})))),i.createElement("div",{className:"graphiql-editor-tools"},i.createElement("div",{className:"graphiql-editor-tools-tabs"},i.createElement(o.v0,{type:"button",className:"variables"===r?"active":"",onClick:()=>{s("variables"===r?"":"variables")}},"Variables"),i.createElement(o.v0,{type:"button",className:"headers"===r?"active":"",onClick:()=>{s("headers"===r?"":"headers")}},"Headers"))),i.createElement("section",{className:`graphiql-editor-tool ${r&&r.length>0?l.tool:l.notool}`,"aria-label":"variables"===r?"Variables":"Headers"},i.createElement(o.hF,{editorTheme:e.editorTheme,isHidden:"variables"!==r,keyMap:e.keyMap,onEdit:e.onEditVariables,readOnly:e.readOnly}),i.createElement(o.LA,{editorTheme:e.editorTheme,isHidden:"headers"!==r,keyMap:e.keyMap,onEdit:e.onEditHeaders,readOnly:e.readOnly})))}class u{constructor(){this.map=new Map,this.length=0}getItem(e){return this.map.get(e)}setItem(e,t){this.map.has(e)||(this.length+=1),this.map.set(e,t)}removeItem(e){this.map.has(e)&&(this.length-=1),this.map.delete(e)}clear(){this.length=0,this.map.clear()}}function c(){return(0,o.JB)({nonNull:!0}).isFetching?i.createElement(o.$j,null):null}function p(e){let{typegraph:t,query:n,panel:d=null,headers:p={},variables:h={},tab:g=""}=e;const{siteConfig:{customFields:{tgUrl:f}}}=(0,s.Z)(),k=(0,i.useMemo)((()=>new u),[]);return i.createElement(r.Z,{fallback:i.createElement("div",null,"Loading...")},(()=>{const e=(0,i.useMemo)((()=>(0,a.nq)({url:`${f}/${t}`})),[]);return i.createElement(o.j$,{fetcher:e,defaultQuery:n.loc.source.body.trim(),defaultHeaders:JSON.stringify(p),variables:JSON.stringify(h),storage:k},i.createElement("div",{className:`graphiql-container ${l.container}`},d?i.createElement("div",{className:`graphiql-response ${l.panel}`},d):null,i.createElement("div",{className:`graphiql-session ${l.editor}`},i.createElement(m,{defaultTab:g})),i.createElement("div",{className:`graphiql-response ${l.response}`},i.createElement(c,null),i.createElement(o.iB,null))))}))}},9688:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var i=n(1163),a=n(6986),r=n(9107),s=n(959);function o(e){let{python:t,...n}=e;return s.createElement(a.Z,(0,i.Z)({panel:s.createElement(r.Z,{language:"python"},t)},n))}},8232:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>u});var i=n(1163),a=(n(959),n(7942)),r=n(9688),s=n(9107);const o={sidebar_position:3},l="Adding more runtimes",d={unversionedId:"tutorials/adding-more-runtimes/index",id:"tutorials/adding-more-runtimes/index",title:"Adding more runtimes",description:"Getting random data is great, but having some input variables and meaningful output is even better. The random runtime is usually used to quickly draft and iterate on an API prototype. Once the interface feels efficient and well-designed, it's time to move another runtime backed by some storage.",source:"@site/docs/tutorials/adding-more-runtimes/index.mdx",sourceDirName:"tutorials/adding-more-runtimes",slug:"/tutorials/adding-more-runtimes/",permalink:"/docs/tutorials/adding-more-runtimes/",draft:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/tutorials/adding-more-runtimes/index.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docs",previous:{title:"Your first typegraph",permalink:"/docs/tutorials/your-first-typegraph/"},next:{title:"Import your API blocks",permalink:"/docs/tutorials/import-your-api-blocks/"}},m={},u=[{value:"Prisma runtime",id:"prisma-runtime",level:2},{value:"GraphQL runtime",id:"graphql-runtime",level:2}],c={toc:u},p="wrapper";function h(e){let{components:t,...o}=e;return(0,a.kt)(p,(0,i.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"adding-more-runtimes"},"Adding more runtimes"),(0,a.kt)("p",null,"Getting random data is great, but having some input variables and meaningful output is even better. The random runtime is usually used to quickly draft and iterate on an API prototype. Once the interface feels efficient and well-designed, it's time to move another runtime backed by some storage."),(0,a.kt)("admonition",{title:"Please share your feedback",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},'You can raise issues, suggest improvements, ask questions and share your feedback using comments below \u2193, using private messages with the "Help, Feedback & Roadmap" button on the right \u2192 or directly using the ',(0,a.kt)("a",{parentName:"p",href:"https://github.com/metatypedev/metatype/discussions"},"GitHub discussions"),".")),(0,a.kt)("h2",{id:"prisma-runtime"},"Prisma runtime"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.prisma.io/"},"Prisma"),' is a "Next-generation Node.js and Typescript ORM" that support for PostgreSQL, MySQL/MariaDB, SQLite, MongoDB, CockroadDB and Microsoft SQL Server. It is one of the main runtimes provided by Metatype and doesn\'t require any additional installation.'),(0,a.kt)("p",null,"Go ahead and update ",(0,a.kt)("inlineCode",{parentName:"p"},"typegraph.py")," with the highlighted lines below:"),(0,a.kt)(r.Z,{typegraph:"database",python:n(8739),query:n(7658),mdxType:"TGExample"}),(0,a.kt)("p",null,"A few things to note on the changes:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"You can import runtimes from ",(0,a.kt)("inlineCode",{parentName:"li"},"typegraph.runtime.Y")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"typegraph.providers.X.runtimes.Y")," for non-core providers."),(0,a.kt)("li",{parentName:"ol"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"config")," method allows to specify runtime specific attributes. In this case, ",(0,a.kt)("inlineCode",{parentName:"li"},"id")," shall be automatically set and incremented by the database."),(0,a.kt)("li",{parentName:"ol"},"Types get generated names unless you manually specify them. You can find the exact names in the playground documentation. Here you want to have a human friendly name as it will also be the name of the table in your database."),(0,a.kt)("li",{parentName:"ol"},"Runtimes often come with some sugar syntax to generate types and avoid manipulating materializers directly. A corresponding declaration would have looked like this:")),(0,a.kt)(s.Z,{language:"python",mdxType:"CodeBlock"},n(5099)),(0,a.kt)("p",null,"In order to use the Prisma runtime, you need to add a new environment variable to the typegate and restart the docker container. Runtimes don't take raw secrets, but instead a secret key used to look up environment variables named under the format ",(0,a.kt)("inlineCode",{parentName:"p"},"TG_[typegraph name]_[key]"),". You also need to run a separate command to generate the database migration."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cat docker-compose.yml\n#services:\n#  ..\n#  environment:\n# highlight-next-line\n#    TG_DATABASE_POSTGRES_CONN: postgres://postgres:password@postgres:5432/db\n\ndocker compose down\ndocker compose up -d\n\nmeta prisma dev database # you need to mention the typegraph name, in this case `database`\n")),(0,a.kt)("p",null,"And now, you can iteratively continue to improve your interface, running migrations and having data stored inside your database."),(0,a.kt)("h2",{id:"graphql-runtime"},"GraphQL runtime"),(0,a.kt)("p",null,"You currently have a single model to describe messages sent in the chat-based app. A reasonable next step is to add a user model and make a link between the two. While you can store users in the same database, it's wiser to avoid data duplication and re-use your service for user management available at ",(0,a.kt)("a",{parentName:"p",href:"https://graphqlzero.almansi.me"},"GraphQLZero")," endpoint. Lets introduce the GraphQL runtime that allows remote GraphQL queries."),(0,a.kt)("p",null,"Update ",(0,a.kt)("inlineCode",{parentName:"p"},"typegraph.py")," with the highlighted lines below:"),(0,a.kt)(r.Z,{typegraph:"graphql",python:n(9408),query:n(1865),mdxType:"TGExample"}),(0,a.kt)("p",null,"Again, a few interesting happened here:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"No need to run ",(0,a.kt)("inlineCode",{parentName:"li"},"meta prisma dev [typegraph name]")," again. The field ",(0,a.kt)("inlineCode",{parentName:"li"},"user")," comes from another runtime and doesn't exist in the database. The typegate will orchestrate the query execution in all runtimes and minimize the work done."),(0,a.kt)("li",{parentName:"ol"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"from_parent")," rule automatically fills the input type with the parent field named ",(0,a.kt)("inlineCode",{parentName:"li"},"uid"),". The ",(0,a.kt)("inlineCode",{parentName:"li"},"g(\xb7)")," rule allows to make named reference to another type and avoid circular reference.")),(0,a.kt)("p",null,"Other type enforcement rules also exists:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"from_secret(key)")," to fill the input type with the secret in the ",(0,a.kt)("inlineCode",{parentName:"li"},"TG_[typegraph name]_[key]")," format"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"from_context(\xb7)")," to fill the input type with content from the request context, such as JSON Web Token (JWT), etc."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"set(x)")," to fill the input type with content ",(0,a.kt)("inlineCode",{parentName:"li"},"x"))),(0,a.kt)("p",null,"You should now start to see the power provided by Metatype and might wonder how to integrate it step by step with your existing systems. Writing all those types by hand is tedious and error prone. The next section will show you how to generate types from existing sources."))}h.isMDXComponent=!0},7658:e=>{var t={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"A"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"create_message"},arguments:[{kind:"Argument",name:{kind:"Name",value:"data"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"title"},value:{kind:"StringValue",value:"Hello World",block:!1}},{kind:"ObjectField",name:{kind:"Name",value:"body"},value:{kind:"StringValue",value:"This is a message",block:!1}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]}]}}]}},{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"B"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"list_messages"},arguments:[{kind:"Argument",name:{kind:"Name",value:"where"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"title"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"equals"},value:{kind:"StringValue",value:"Hello World",block:!1}}]}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"body"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:251}};t.loc.source={body:'mutation A {\n  create_message(\n    data: {\n      # id is autogenerated\n      title: "Hello World"\n      body: "This is a message"\n    }\n  ) {\n    id\n  }\n}\n\nquery B {\n  list_messages(where: { title: { equals: "Hello World" } }) {\n    id\n    body\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};function n(e,t){if("FragmentSpread"===e.kind)t.add(e.name.value);else if("VariableDefinition"===e.kind){var i=e.type;"NamedType"===i.kind&&t.add(i.name.value)}e.selectionSet&&e.selectionSet.selections.forEach((function(e){n(e,t)})),e.variableDefinitions&&e.variableDefinitions.forEach((function(e){n(e,t)})),e.definitions&&e.definitions.forEach((function(e){n(e,t)}))}var i={};function a(e,t){for(var n=0;n<e.definitions.length;n++){var i=e.definitions[n];if(i.name&&i.name.value==t)return i}}function r(e,t){var n={kind:e.kind,definitions:[a(e,t)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var r=i[t]||new Set,s=new Set,o=new Set;for(r.forEach((function(e){o.add(e)}));o.size>0;){var l=o;o=new Set,l.forEach((function(e){s.has(e)||(s.add(e),(i[e]||new Set).forEach((function(e){o.add(e)})))}))}return s.forEach((function(t){var i=a(e,t);i&&n.definitions.push(i)})),n}t.definitions.forEach((function(e){if(e.name){var t=new Set;n(e,t),i[e.name.value]=t}})),e.exports=t,e.exports.A=r(t,"A"),e.exports.B=r(t,"B")},1865:e=>{var t={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"A"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"list_users"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"data"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"name"},arguments:[],directives:[]}]}}]}}]}},{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"B"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"list_messages"},arguments:[{kind:"Argument",name:{kind:"Name",value:"take"},value:{kind:"IntValue",value:"2"}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"user"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"name"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:197}};t.loc.source={body:"query A {\n  list_users {\n    data {\n      id\n      name\n    }\n  }\n}\n\nquery B {\n  list_messages(take: 2) {\n    title\n    user {\n      # composition automatically happens here\n      name\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};function n(e,t){if("FragmentSpread"===e.kind)t.add(e.name.value);else if("VariableDefinition"===e.kind){var i=e.type;"NamedType"===i.kind&&t.add(i.name.value)}e.selectionSet&&e.selectionSet.selections.forEach((function(e){n(e,t)})),e.variableDefinitions&&e.variableDefinitions.forEach((function(e){n(e,t)})),e.definitions&&e.definitions.forEach((function(e){n(e,t)}))}var i={};function a(e,t){for(var n=0;n<e.definitions.length;n++){var i=e.definitions[n];if(i.name&&i.name.value==t)return i}}function r(e,t){var n={kind:e.kind,definitions:[a(e,t)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var r=i[t]||new Set,s=new Set,o=new Set;for(r.forEach((function(e){o.add(e)}));o.size>0;){var l=o;o=new Set,l.forEach((function(e){s.has(e)||(s.add(e),(i[e]||new Set).forEach((function(e){o.add(e)})))}))}return s.forEach((function(t){var i=a(e,t);i&&n.definitions.push(i)})),n}t.definitions.forEach((function(e){if(e.name){var t=new Set;n(e,t),i[e.name.value]=t}})),e.exports=t,e.exports.A=r(t,"A"),e.exports.B=r(t,"B")},8739:e=>{e.exports='# highlight-next-line\nfrom typegraph.providers.prisma.runtimes.prisma import PrismaRuntime\n\nwith TypeGraph(\n  "database",\n) as g:\n  db = PrismaRuntime("database", "POSTGRES_CONN")\n  public = policies.public()\n\n  message = t.struct(\n    {\n      # highlight-next-line\n      "id": t.integer().config("id", "auto"),\n      "title": t.string(),\n      "body": t.string(),\n    }\n    # highlight-next-line\n  ).named("message")\n\n  g.expose(\n    # highlight-next-line\n    create_message=db.insert_one(message),\n    list_messages=db.find_many(message),\n    default_policy=[public],\n  )'},9408:e=>{e.exports='# highlight-next-line\nfrom typegraph.runtimes.graphql import GraphQLRuntime\n\nwith TypeGraph(\n  "graphql",\n) as g:\n  db = PrismaRuntime("database", "POSTGRES_CONN")\n  # highlight-next-line\n  gql = GraphQLRuntime("https://graphqlzero.almansi.me/api")\n  public = policies.public()\n\n  user = t.struct({"id": t.integer(), "name": t.string()})\n\n  message = t.struct(\n    {\n      "id": t.integer().config("id", "auto"),\n      "title": t.string(),\n      "user_id": t.integer().named("uid"),\n      # highlight-next-line\n      "user": gql.query(\n        t.struct(\n          {\n            # highlight-next-line\n            "id": t.integer().from_parent(g("uid"))\n          }\n        ),\n        t.optional(user),\n      ),\n    }\n  ).named("message")\n\n  g.expose(\n    create_message=db.insert_one(message),\n    list_messages=db.find_many(message),\n    list_users=gql.query(t.struct({}), t.struct({"data": t.array(user)})),\n    default_policy=[public],\n  )'},5099:e=>{e.exports='t.func(\n  t.struct(\n    {\n      "data": t.struct(\n        {\n          # notice to absence of `id` as automatically generated\n          "title": t.string(),\n          "body": t.string(),\n        }\n      )\n    }\n  ),\n  t.array(message),\n  PrismaOperationMat(\n    db,\n    "Message",\n    "createOne",\n    effect=effects.create(),\n  ),\n)'}}]);
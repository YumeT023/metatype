"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5062],{8410:(e,t,p)=>{p.r(t),p.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var r=p(4778),n=(p(959),p(7942));const a={sidebar_label:"openapi",title:"typegraph.importers.openapi"},i=void 0,o={unversionedId:"reference/typegraph/typegraph/importers/openapi",id:"reference/typegraph/typegraph/importers/openapi",title:"typegraph.importers.openapi",description:"OpenApiImporter Objects",source:"@site/docs/reference/typegraph/typegraph/importers/openapi.md",sourceDirName:"reference/typegraph/typegraph/importers",slug:"/reference/typegraph/typegraph/importers/openapi",permalink:"/docs/reference/typegraph/typegraph/importers/openapi",draft:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/reference/typegraph/typegraph/importers/openapi.md",tags:[],version:"current",frontMatter:{sidebar_label:"openapi",title:"typegraph.importers.openapi"},sidebar:"docs",previous:{title:"importer",permalink:"/docs/reference/typegraph/typegraph/importers/base/importer"},next:{title:"relations",permalink:"/docs/reference/typegraph/typegraph/providers/prisma/relations"}},s={},l=[{value:"OpenApiImporter Objects",id:"openapiimporter-objects",level:2},{value:"__init__",id:"__init__",level:4},{value:"Path Objects",id:"path-objects",level:2},{value:"gen_input_type",id:"gen_input_type",level:4}],c={toc:l},m="wrapper";function d(e){let{components:t,...p}=e;return(0,n.kt)(m,(0,r.Z)({},c,p,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"openapiimporter-objects"},"OpenApiImporter Objects"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"class OpenApiImporter(Importer)\n")),(0,n.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(name: str,\n             *,\n             url: Optional[str] = None,\n             file: Optional[str] = None,\n             base_url: Optional[str] = None,\n             renames: Dict[str, str] = {},\n             keep_names: List[str] = [])\n")),(0,n.kt)("p",null,"Requires either only ",(0,n.kt)("inlineCode",{parentName:"p"},"url")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"file")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"base_url")),(0,n.kt)("h2",{id:"path-objects"},"Path Objects"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"class Path()\n")),(0,n.kt)("h4",{id:"gen_input_type"},"gen","_","input","_","type"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def gen_input_type(op_spec: Box) -> Tuple[t.typedef, Box]\n")),(0,n.kt)("p",null,"Returns a tuple of t.typedef and a box of kwargs"))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7760],{5939:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var a=n(1163),r=(n(959),n(7942));const i={sidebar_label:"types",title:"typegraph.types"},p=void 0,l={unversionedId:"reference/typegraph/typegraph/types",id:"reference/typegraph/typegraph/types",title:"typegraph.types",description:"number Objects",source:"@site/docs/reference/typegraph/typegraph/types.md",sourceDirName:"reference/typegraph/typegraph",slug:"/reference/typegraph/typegraph/types",permalink:"/docs/reference/typegraph/typegraph/types",draft:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/reference/typegraph/typegraph/types.md",tags:[],version:"current",frontMatter:{sidebar_label:"types",title:"typegraph.types"},sidebar:"docs",previous:{title:"wasmedge",permalink:"/docs/reference/typegraph/typegraph/runtimes/wasmedge"},next:{title:"Queries",permalink:"/docs/reference/typegate/prisma-migration/queries"}},s={},o=[{value:"number Objects",id:"number-objects",level:2},{value:"integer Objects",id:"integer-objects",level:2},{value:"union Objects",id:"union-objects",level:2},{value:"either Objects",id:"either-objects",level:2}],m={toc:o},u="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"number-objects"},"number Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@with_constraints\n\n@frozen\nclass number(typedef)\n")),(0,r.kt)("p",null,"Represents a generic number."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_min")," ",(0,r.kt)("em",{parentName:"li"},"float, optional")," - minimum constraint"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_max")," ",(0,r.kt)("em",{parentName:"li"},"float, optional")," - maximum constraint"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_x_min")," ",(0,r.kt)("em",{parentName:"li"},"float, optional")," - exclusive minimum constraint"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_x_max")," ",(0,r.kt)("em",{parentName:"li"},"float, optional")," - exclusive maximum constraint"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_multiple_of")," ",(0,r.kt)("em",{parentName:"li"},"float, optional")," - number must be a multiple of")),(0,r.kt)("h2",{id:"integer-objects"},"integer Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@frozen\nclass integer(number)\n")),(0,r.kt)("p",null,"An integer."),(0,r.kt)("h2",{id:"union-objects"},"union Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@frozen\nclass union(typedef)\n")),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"union")," type represents a general union with the variants provided."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"union")," type is equivalent to the ",(0,r.kt)("inlineCode",{parentName:"p"},"anyOf")," field in JSON Schema where\nthe given data must be valid against one or more of the given subschemas."),(0,r.kt)("h2",{id:"either-objects"},"either Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@frozen\nclass either(typedef)\n")),(0,r.kt)("p",null,"An ",(0,r.kt)("inlineCode",{parentName:"p"},"either")," type represents a disjoint union with the variants provided."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"either")," type is equivalent to the ",(0,r.kt)("inlineCode",{parentName:"p"},"oneOf")," field in JSON Schema where\nthe given data must be valid against exactly one of the given subschemas."))}c.isMDXComponent=!0}}]);
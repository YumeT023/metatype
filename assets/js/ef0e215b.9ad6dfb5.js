(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6291],{7069:(e,t,a)=>{"use strict";a.d(t,{Z:()=>d});var n=a(959),i=a(2191),r=a(3494),o=a(867),s=a(1328);const l={container:"container_KHaM",panel:"panel_p8cl",editor:"editor_LjJP",response:"response_Ger1",tool:"tool_nUFu",notool:"notool_i7V8"},p=e=>{e.getWrapperElement().closest(".graphiql-editor").style.height=`${e.doc.height}px`};function c(e){const{queryEditor:t,variableEditor:a,headerEditor:i}=(0,s._i)({nonNull:!0}),[r,o]=(0,n.useState)(e.defaultTab),c=(0,s.Xd)({onCopyQuery:e.onCopyQuery}),u=(0,s.fE)();return(0,n.useEffect)((()=>{a&&p(a)}),[r,a]),(0,n.useEffect)((()=>{i&&p(i)}),[r,i]),(0,n.useEffect)((()=>{t&&(t.setOption("lineNumbers",!1),t.setOption("gutters",[]),t.on("change",p),p(t))}),[t]),(0,n.useEffect)((()=>{a&&(a.setOption("lineNumbers",!1),a.setOption("gutters",[]),a.on("change",p))}),[a]),(0,n.useEffect)((()=>{i&&(i.setOption("lineNumbers",!1),i.setOption("gutters",[]),i.on("change",p))}),[i]),n.createElement("div",{className:"graphiql-editors"},n.createElement("section",{className:"graphiql-query-editor","aria-label":"Query Editor"},n.createElement("div",{className:"graphiql-query-editor-wrapper"},n.createElement(s.WK,{editorTheme:e.editorTheme,keyMap:e.keyMap,onCopyQuery:e.onCopyQuery,onEdit:e.onEditQuery,readOnly:e.readOnly})),n.createElement("div",{className:"graphiql-toolbar",role:"toolbar","aria-label":"Editor Commands"},n.createElement(s._8,null),n.createElement(s.wC,{onClick:()=>u(),label:"Prettify query (Shift-Ctrl-P)"},n.createElement(s.Kt,{className:"graphiql-toolbar-icon","aria-hidden":"true"})),n.createElement(s.wC,{onClick:()=>c(),label:"Copy query (Shift-Ctrl-C)"},n.createElement(s.TI,{className:"graphiql-toolbar-icon","aria-hidden":"true"})))),n.createElement("div",{className:"graphiql-editor-tools"},n.createElement("div",{className:"graphiql-editor-tools-tabs"},n.createElement(s.v0,{type:"button",className:"variables"===r?"active":"",onClick:()=>{o("variables"===r?"":"variables")}},"Variables"),n.createElement(s.v0,{type:"button",className:"headers"===r?"active":"",onClick:()=>{o("headers"===r?"":"headers")}},"Headers"))),n.createElement("section",{className:`graphiql-editor-tool ${r&&r.length>0?l.tool:l.notool}`,"aria-label":"variables"===r?"Variables":"Headers"},n.createElement(s.hF,{editorTheme:e.editorTheme,isHidden:"variables"!==r,keyMap:e.keyMap,onEdit:e.onEditVariables,readOnly:e.readOnly}),n.createElement(s.LA,{editorTheme:e.editorTheme,isHidden:"headers"!==r,keyMap:e.keyMap,onEdit:e.onEditHeaders,readOnly:e.readOnly})))}class u{constructor(){this.map=new Map,this.length=0}getItem(e){return this.map.get(e)}setItem(e,t){this.map.has(e)||(this.length+=1),this.map.set(e,t)}removeItem(e){this.map.has(e)&&(this.length-=1),this.map.delete(e)}clear(){this.length=0,this.map.clear()}}function h(){return(0,s.JB)({nonNull:!0}).isFetching?n.createElement(s.$j,null):null}function d(e){let{typegraph:t,query:a,panel:p=null,headers:d={},variables:m={},tab:g=""}=e;const{siteConfig:{customFields:{tgUrl:y}}}=(0,o.Z)(),f=(0,n.useMemo)((()=>new u),[]);return n.createElement(r.Z,{fallback:n.createElement("div",null,"Loading...")},(()=>{const e=(0,n.useMemo)((()=>(0,i.nq)({url:`${y}/${t}`})),[]);return n.createElement(s.j$,{fetcher:e,defaultQuery:a.loc.source.body.trim(),defaultHeaders:JSON.stringify(d),variables:JSON.stringify(m),storage:f},n.createElement("div",{className:`graphiql-container ${l.container}`},p?n.createElement("div",{className:`graphiql-response ${l.panel}`},p):null,n.createElement("div",{className:`graphiql-session ${l.editor}`},n.createElement(c,{defaultTab:g})),n.createElement("div",{className:`graphiql-response ${l.response}`},n.createElement(h,null),n.createElement(s.iB,null))))}))}},4990:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=a(1163),i=(a(959),a(7942)),r=a(5705);a(7069);const o={sidebar_position:2,comments:!1},s="Typegraph",l={unversionedId:"concepts/typegraph/index",id:"concepts/typegraph/index",title:"Typegraph",description:"Typegraph is a Python package for building virtual graphs of types and managing their metadata. The name also refer to the typegraph specification which is a file format, currently in JSON, describing all elements of a typegraph.",source:"@site/docs/concepts/typegraph/index.mdx",sourceDirName:"concepts/typegraph",slug:"/concepts/typegraph/",permalink:"/docs/concepts/typegraph/",draft:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/concepts/typegraph/index.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,comments:!1},sidebar:"docs",previous:{title:"Overview",permalink:"/docs/concepts/overview/"},next:{title:"Typegate",permalink:"/docs/concepts/typegate/"}},p={},c=[{value:"Types",id:"types",level:2},{value:"Materializers",id:"materializers",level:2},{value:"Runtimes",id:"runtimes",level:2},{value:"Policies",id:"policies",level:2},{value:"Triggers",id:"triggers",level:2}],u={toc:c},h="wrapper";function d(e){let{components:t,...o}=e;return(0,i.kt)(h,(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"typegraph"},"Typegraph"),(0,i.kt)("p",null,"Typegraph is a ",(0,i.kt)("a",{parentName:"p",href:"https://pypi.org/project/typegraph/"},"Python package")," for building virtual graphs of types and managing their metadata. The name also refer to the ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/specification"},"typegraph specification")," which is a file format, currently in JSON, describing all elements of a typegraph."),(0,i.kt)("admonition",{title:"Why Python?",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Python is a high-level general purpose language with great readability and dynamic typing. This was an asset during the prototyping phase enabling to quickly iterate on the design. It has now fewer benefits but remains an accessible language for everyone to pick up. No advanced features of the language is used."),(0,i.kt)("p",{parentName:"admonition"},"In theory, all frameworks and languages can produce typegraphs respecting the specification to become executable by typegates. This opens the door to a wide range of use cases, including generating typegraphs automatically from existing code base and tools.")),(0,i.kt)("h2",{id:"types"},"Types"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Types")," are the building block of typegraphs. They define a type system describing all data objects processed in Metatype. They can be easily extended to support new data types according to the needs of the application."),(0,i.kt)(r.Z,{language:"python",mdxType:"CodeBlock"},a(3187)),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"SQL analogy"),": types are similar to the Data Definition Language (DDL) with the capacity of describing any type of data."),(0,i.kt)("h2",{id:"materializers"},"Materializers"),(0,i.kt)("p",null,"Types can also describe functions and ",(0,i.kt)("strong",{parentName:"p"},"materializers")," define how the input type gets transformed into the output type. The input and output types can understood like a function signature and a materializer like the function implementation, except that it might not always know what the function body is. In such case, the materializer knows at least where and how to access it."),(0,i.kt)(r.Z,{language:"python",mdxType:"CodeBlock"},a(8331)),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"SQL analogy"),": a materializer is similar to a join, a function, or an alias."),(0,i.kt)("h2",{id:"runtimes"},"Runtimes"),(0,i.kt)("p",null,"Every types and materializers has a runtime associated to it. This runtime describes where the type or materializer are physically located. It can be another API, a database, or any other services the typegate can connect to. The typegates uses that information to optimize the execution of the queries and minimize the amount of data moved."),(0,i.kt)("p",null,"In practice, materializers are often not explicitly used and the usage of runtime sugar syntax is preferred."),(0,i.kt)(r.Z,{language:"python",mdxType:"CodeBlock"},a(961)),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"SQL analogy"),": a runtime is similar to a database instance running some requests."),(0,i.kt)("h2",{id:"policies"},"Policies"),(0,i.kt)("p",null,"Policies are a special type of function ",(0,i.kt)("inlineCode",{parentName:"p"},"t.func(t.struct({...}), t.boolean().optional())")," attachable to any other type. They are evaluated once per request and determine whether one of the polices authorizes the access or not. They receive the request context (see ",(0,i.kt)("a",{parentName:"p",href:"./typegate"},"typegate"),") as argument allowing you to implement authorization, access control, or any other business logic."),(0,i.kt)("p",null,"The policy decision can be:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"true"),": the access is authorized"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"false"),": the access is denied"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"null"),": the access in inherited from the parent types")),(0,i.kt)(r.Z,{language:"python",mdxType:"CodeBlock"},a(6799)),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"SQL analogy"),": policies are similar to Row Security Policies (RSP) or Row Level Security (RLS) concepts."),(0,i.kt)("h2",{id:"triggers"},"Triggers"),(0,i.kt)("p",null,"Triggers are events launching the execution of one or multiple functions. They fires when a GraphQL request is received for the specific typegraph."),(0,i.kt)(r.Z,{language:"python",mdxType:"CodeBlock"},a(3191)),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"SQL analogy"),": a trigger is similar to receiving a new query."))}d.isMDXComponent=!0},8331:e=>{e.exports='t.func(\n  t.struct({"input": t.string()}),\n  t.string(),\n  PureFunMat("({ input }) => `hello ${input}`"),  # with logic\n)\n\nt.func(\n  t.struct({}),\n  t.enum(["head", "tail"]),\n  RESTMat(http, "GET", "/flip_coin", effect=effects.none),  # where the logic is\n)'},6799:e=>{e.exports='public = Policy(PureFunMat("() => true"))\nteam_only = Policy(PureFunMat("(ctx) => ctx.user.role === \'admin\'"))'},961:e=>{e.exports='http = HTTPRuntime("https://random.org/api")\n\n# same func as above\nhttp.get(\n  "/flip_coin", t.struct({}), t.enum(["head", "tail"])\n)  # implicitly attaches runtime to all types'},3191:e=>{e.exports='with TypeGraph("triggers") as g:\n  # ...\n  g.expose(\n    flip=http.get("/flip_coin", t.struct({}), t.enum(["head", "tail"])),\n    default_policy=[public],\n  )'},3187:e=>{e.exports='t.struct(\n  {\n    "id": t.uuid(),\n    "age": t.integer(),\n    "cars": t.array(\n      t.struct(\n        {\n          "model": t.string(),\n          "name": t.string().optional(),\n        }\n      )\n    ),\n  }\n)'}}]);
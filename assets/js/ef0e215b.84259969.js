"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[291],{846:(e,t,p)=>{p.r(t),p.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>n,metadata:()=>o,toc:()=>c});var a=p(4250),r=(p(959),p(7942)),i=p(7287);const n={sidebar_position:2},s="Typegraph",o={unversionedId:"concepts/typegraph/index",id:"concepts/typegraph/index",title:"Typegraph",description:"Typegraph is Python package for building graphs of types and manage metadata.",source:"@site/docs/concepts/typegraph/index.mdx",sourceDirName:"concepts/typegraph",slug:"/concepts/typegraph/",permalink:"/docs/concepts/typegraph/",draft:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/concepts/typegraph/index.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"concepts",previous:{title:"Overview",permalink:"/docs/concepts/overview"},next:{title:"Importers",permalink:"/docs/concepts/typegraph/importers"}},l={},c=[{value:"Types",id:"types",level:2},{value:"Runtimes",id:"runtimes",level:2},{value:"Materializers",id:"materializers",level:2},{value:"Policies",id:"policies",level:2}],d={toc:c};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"typegraph"},"Typegraph"),(0,r.kt)("p",null,"Typegraph is ",(0,r.kt)("a",{parentName:"p",href:"https://pypi.org/project/typegraph/"},"Python package")," for building graphs of types and manage metadata."),(0,r.kt)(i.Z,{language:"py",mdxType:"CodeBlock"},p(3629).Z),(0,r.kt)("h2",{id:"types"},"Types"),(0,r.kt)("h2",{id:"runtimes"},"Runtimes"),(0,r.kt)("h2",{id:"materializers"},"Materializers"),(0,r.kt)("h2",{id:"policies"},"Policies"))}m.isMDXComponent=!0},3629:(e,t,p)=>{p.d(t,{Z:()=>a});const a='from typegraph.graphs.typegraph import TypeGraph\nfrom typegraph.materializers.deno import FunMat\nfrom typegraph.materializers.graphql import GraphQLRuntime\nfrom typegraph.policies import Policy\nfrom typegraph.types import types as t\n\nwith TypeGraph("mini") as g:\n\n    remote = GraphQLRuntime("https://graphqlzero.almansi.me/api")\n\n    allow_all = Policy(FunMat("() => true")).named("allow_all_policy")\n\n    post = t.struct(\n        {\n            "id": t.integer(),\n            "title": t.string(),\n            "body": t.string(),\n        }\n    ).named("Post")\n\n    getter = remote.query(t.struct({"id": t.integer()}), t.optional(post)).add_policy(\n        allow_all\n    )\n\n    g.expose(post=getter)\n'}}]);
"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8693],{1561:(e,t,p)=>{p.r(t),p.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>m,frontMatter:()=>n,metadata:()=>r,toc:()=>c});var o=p(5882),i=(p(959),p(7942)),s=p(6224);const n={},l="Policies",r={unversionedId:"docs/concepts/typegraph/policies/index",id:"docs/concepts/typegraph/policies/index",title:"Policies",description:"Allow all",source:"@site/pages/docs/concepts/typegraph/policies/index.mdx",sourceDirName:"docs/concepts/typegraph/policies",slug:"/docs/concepts/typegraph/policies/",permalink:"/docs/concepts/typegraph/policies/",draft:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/pages/docs/concepts/typegraph/policies/index.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Importers",permalink:"/docs/concepts/typegraph/importers"},next:{title:"Runtimes",permalink:"/docs/concepts/typegraph/runtimes"}},a={},c=[{value:"Allow all",id:"allow-all",level:2}],d={toc:c};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"policies"},"Policies"),(0,i.kt)("h2",{id:"allow-all"},"Allow all"),(0,i.kt)(s.Z,{language:"py",mdxType:"CodeBlock"},p(8524).Z))}m.isMDXComponent=!0},8524:(e,t,p)=>{p.d(t,{Z:()=>o});const o='from typegraph import policies\nfrom typegraph import t\nfrom typegraph import TypeGraph\nfrom typegraph.runtimes.graphql import GraphQLRuntime\n\nwith TypeGraph("allow_all") as g:\n\n    remote = GraphQLRuntime("https://graphqlzero.almansi.me/api")\n    allow_all = policies.allow_all()\n\n    post = t.struct(\n        {\n            "id": t.integer(),\n            "title": t.string(),\n            "body": t.string(),\n        }\n    ).named("Post")\n\n    getter = remote.query(t.struct({"id": t.integer()}), t.optional(post)).add_policy(\n        policies.allow_all()\n    )\n\n    g.expose(post=getter)\n'}}]);
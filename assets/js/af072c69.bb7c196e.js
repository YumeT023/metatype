(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1797],{7309:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(1163),i=(n(959),n(7942)),r=n(9688);const o={sidebar_position:2},s="Backend for frontend",l={unversionedId:"backend-for-frontend/index",id:"backend-for-frontend/index",title:"Backend for frontend",description:"Backend for frontend (BFF) is an architectural pattern in which each frontend",source:"@site/use-cases/backend-for-frontend/index.mdx",sourceDirName:"backend-for-frontend",slug:"/backend-for-frontend/",permalink:"/use-cases/backend-for-frontend/",draft:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/use-cases/backend-for-frontend/index.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"useCases",previous:{title:"ORM for the edge",permalink:"/use-cases/orm-for-the-edge/"},next:{title:"Authentication and authorization provider",permalink:"/use-cases/authentication-authorization-provider/"}},d={},c=[{value:"Study case",id:"study-case",level:2},{value:"Suggested solution",id:"suggested-solution",level:2}],u={toc:c},h="wrapper";function m(e){let{components:t,...o}=e;return(0,i.kt)(h,(0,a.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"backend-for-frontend"},"Backend for frontend"),(0,i.kt)("p",null,"Backend for frontend (BFF) is an architectural pattern in which each frontend\nclient has a dedicated backend system. It allows for client-specific\ncustomization of the API, including endpoints and data transformations, to\nsupport unique needs of the frontend."),(0,i.kt)("h2",{id:"study-case"},"Study case"),(0,i.kt)("div",{className:"text-center md:float-right p-8"},(0,i.kt)("p",null,(0,i.kt)("img",{src:n(3626).Z,width:"311",height:"311"}))),(0,i.kt)("p",null,"Imagine you have a web frontend and mobile app that both consume data from a\n(micro)service-based backend. The web frontend requires certain data fields in one\nformat, and the mobile app requires different data fields in another different\nformat."),(0,i.kt)("p",null,"In a traditional architecture, both the web and mobile frontends would have to\nmake separate API calls to the (micro)services, and then format the data into the\nappropriate structure themselves. This can lead to duplicated code, increased\nlatency, and decreased efficiency."),(0,i.kt)("p",null,"However, with a BFF in place, the BFF can handle the formatting of the data,\nbased on the specific needs of each frontend. This means that the frontends can\nmake a single API call to the BFF, which then communicates with the\n(micro)services, retrieves the data, and formats it into the required structure\nbefore returning it to the frontend. This results in reduced duplicated code,\nimproved performance, and a cleaner separation of concerns between frontend and\nbackend."),(0,i.kt)("h2",{id:"suggested-solution"},"Suggested solution"),(0,i.kt)("p",null,"Metatype can act as a generic BFF component, serving multiple dedicated APIs and\nhandling security, authentication and authorization for you. By encapsulating the\nlogic for communicating with the (micro)services, Metatype helps to ensure that\nthe frontends are as decoupled as possible from the other services, making it\neasier to make changes to either the frontend or the backend without affecting\nthe other."),(0,i.kt)(r.Z,{typegraph:"backend-for-frontend",python:n(9134),query:n(9081),mdxType:"TGExample"}))}m.isMDXComponent=!0},6986:(e,t,n)=>{"use strict";n.d(t,{Z:()=>m});var a=n(959),i=n(3268),r=n(715),o=n(7114),s=n(9037);const l={container:"container_KHaM",panel:"panel_p8cl",editor:"editor_LjJP",response:"response_Ger1",tool:"tool_nUFu",notool:"notool_i7V8"},d=e=>{e.getWrapperElement().closest(".graphiql-editor").style.height=`${e.doc.height}px`};function c(e){const{queryEditor:t,variableEditor:n,headerEditor:i}=(0,s._i)({nonNull:!0}),[r,o]=(0,a.useState)(e.defaultTab),c=(0,s.Xd)({onCopyQuery:e.onCopyQuery}),u=(0,s.fE)();return(0,a.useEffect)((()=>{n&&d(n)}),[r,n]),(0,a.useEffect)((()=>{i&&d(i)}),[r,i]),(0,a.useEffect)((()=>{t&&(t.setOption("lineNumbers",!1),t.setOption("gutters",[]),t.on("change",d),d(t))}),[t]),(0,a.useEffect)((()=>{n&&(n.setOption("lineNumbers",!1),n.setOption("gutters",[]),n.on("change",d))}),[n]),(0,a.useEffect)((()=>{i&&(i.setOption("lineNumbers",!1),i.setOption("gutters",[]),i.on("change",d))}),[i]),a.createElement("div",{className:"graphiql-editors"},a.createElement("section",{className:"graphiql-query-editor","aria-label":"Query Editor"},a.createElement("div",{className:"graphiql-query-editor-wrapper"},a.createElement(s.WK,{editorTheme:e.editorTheme,keyMap:e.keyMap,onCopyQuery:e.onCopyQuery,onEdit:e.onEditQuery,readOnly:e.readOnly})),a.createElement("div",{className:"graphiql-toolbar",role:"toolbar","aria-label":"Editor Commands"},a.createElement(s._8,null),a.createElement(s.wC,{onClick:()=>u(),label:"Prettify query (Shift-Ctrl-P)"},a.createElement(s.Kt,{className:"graphiql-toolbar-icon","aria-hidden":"true"})),a.createElement(s.wC,{onClick:()=>c(),label:"Copy query (Shift-Ctrl-C)"},a.createElement(s.TI,{className:"graphiql-toolbar-icon","aria-hidden":"true"})))),a.createElement("div",{className:"graphiql-editor-tools"},a.createElement("div",{className:"graphiql-editor-tools-tabs"},a.createElement(s.v0,{type:"button",className:"variables"===r?"active":"",onClick:()=>{o("variables"===r?"":"variables")}},"Variables"),a.createElement(s.v0,{type:"button",className:"headers"===r?"active":"",onClick:()=>{o("headers"===r?"":"headers")}},"Headers"))),a.createElement("section",{className:`graphiql-editor-tool ${r&&r.length>0?l.tool:l.notool}`,"aria-label":"variables"===r?"Variables":"Headers"},a.createElement(s.hF,{editorTheme:e.editorTheme,isHidden:"variables"!==r,keyMap:e.keyMap,onEdit:e.onEditVariables,readOnly:e.readOnly}),a.createElement(s.LA,{editorTheme:e.editorTheme,isHidden:"headers"!==r,keyMap:e.keyMap,onEdit:e.onEditHeaders,readOnly:e.readOnly})))}class u{constructor(){this.map=new Map,this.length=0}getItem(e){return this.map.get(e)}setItem(e,t){this.map.has(e)||(this.length+=1),this.map.set(e,t)}removeItem(e){this.map.has(e)&&(this.length-=1),this.map.delete(e)}clear(){this.length=0,this.map.clear()}}function h(){return(0,s.JB)({nonNull:!0}).isFetching?a.createElement(s.$j,null):null}function m(e){let{typegraph:t,query:n,panel:d=null,headers:m={},variables:p={},tab:f=""}=e;const{siteConfig:{customFields:{tgUrl:g}}}=(0,o.Z)(),b=(0,a.useMemo)((()=>new u),[]);return a.createElement(r.Z,{fallback:a.createElement("div",null,"Loading...")},(()=>{const e=(0,a.useMemo)((()=>(0,i.nq)({url:`${g}/${t}`})),[]);return a.createElement(s.j$,{fetcher:e,defaultQuery:n.loc.source.body.trim(),defaultHeaders:JSON.stringify(m),variables:JSON.stringify(p),storage:b},a.createElement("div",{className:`graphiql-container ${l.container}`},d?a.createElement("div",{className:`graphiql-response ${l.panel}`},d):null,a.createElement("div",{className:`graphiql-session ${l.editor}`},a.createElement(c,{defaultTab:f})),a.createElement("div",{className:`graphiql-response ${l.response}`},a.createElement(h,null),a.createElement(s.iB,null))))}))}},9688:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var a=n(1163),i=n(6986),r=n(9107),o=n(959);function s(e){let{python:t,...n}=e;return o.createElement(i.Z,(0,a.Z)({panel:o.createElement(r.Z,{language:"python"},t)},n))}},9081:e=>{var t={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"stargazers"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"login"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"user"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"name"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:67}};t.loc.source={body:"query {\n  stargazers {\n    login\n    user {\n      name\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};function n(e,t){if("FragmentSpread"===e.kind)t.add(e.name.value);else if("VariableDefinition"===e.kind){var a=e.type;"NamedType"===a.kind&&t.add(a.name.value)}e.selectionSet&&e.selectionSet.selections.forEach((function(e){n(e,t)})),e.variableDefinitions&&e.variableDefinitions.forEach((function(e){n(e,t)})),e.definitions&&e.definitions.forEach((function(e){n(e,t)}))}var a={};t.definitions.forEach((function(e){if(e.name){var t=new Set;n(e,t),a[e.name.value]=t}})),e.exports=t},3626:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});const a=n.p+"assets/images/image.drawio-531af772735afa6c25d813a45d0d0a7f.svg"},9134:e=>{e.exports='with TypeGraph(\n  "backend-for-frontend",\n) as g:\n  public = policies.public()\n  github = HTTPRuntime("https://api.github.com")\n\n  stargazer = t.struct(\n    {\n      "login": t.string().named("login"),\n      "user": github.get(\n        "/users/{user}",\n        t.struct({"user": t.string().from_parent(g("login"))}),\n        t.struct({"name": t.string().optional()}),\n      ),\n    }\n  )\n\n  g.expose(\n    stargazers=github.get(\n      "/repos/metatypedev/metatype/stargazers?per_page=2",\n      t.struct({}),\n      t.array(stargazer),\n    ),\n    default_policy=[public],\n  )'}}]);
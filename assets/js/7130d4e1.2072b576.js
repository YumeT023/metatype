"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1053],{7332:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var a=n(1163),i=(n(959),n(7942));const r={sidebar_label:"prisma",title:"typegraph.providers.prisma.runtimes.prisma"},l=void 0,p={unversionedId:"reference/typegraph/typegraph/providers/prisma/runtimes/prisma",id:"reference/typegraph/typegraph/providers/prisma/runtimes/prisma",title:"typegraph.providers.prisma.runtimes.prisma",description:"PrismaRuntime Objects",source:"@site/docs/reference/typegraph/typegraph/providers/prisma/runtimes/prisma.md",sourceDirName:"reference/typegraph/typegraph/providers/prisma/runtimes",slug:"/reference/typegraph/typegraph/providers/prisma/runtimes/prisma",permalink:"/docs/reference/typegraph/typegraph/providers/prisma/runtimes/prisma",draft:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/reference/typegraph/typegraph/providers/prisma/runtimes/prisma.md",tags:[],version:"current",frontMatter:{sidebar_label:"prisma",title:"typegraph.providers.prisma.runtimes.prisma"},sidebar:"docs",previous:{title:"relations",permalink:"/docs/reference/typegraph/typegraph/providers/prisma/relations"},next:{title:"temporal",permalink:"/docs/reference/typegraph/typegraph/providers/temporal/runtimes/temporal"}},o={},s=[{value:"PrismaRuntime Objects",id:"prismaruntime-objects",level:2},{value:"Models",id:"models",level:3},{value:"Relationships",id:"relationships",level:3},{value:"One-to-one relationships",id:"one-to-one-relationships",level:4},{value:"link",id:"link",level:4},{value:"queryRaw",id:"queryraw",level:4},{value:"executeRaw",id:"executeraw",level:4}],m={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"prismaruntime-objects"},"PrismaRuntime Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@frozen\nclass PrismaRuntime(Runtime)\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"A database ORM runtime.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name")," - Name of prisma runtime"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"connection_string_secret")," - Name of the secret that contains the connection string\nthat will be used to connect to the database")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'with TypeGraph("prisma-runtime-example") as g:\n    db = PrismaRuntime("main_db", "DB_CONNECTION")\n\n    user = t.struct(\n        {\n            "id": t.uuid().config("id", "auto"),\n            "email": t.email(),\n        }\n    )\n\n    g.expose(\n        createUser=db.create(user).add_policy(public)\n    )\n')),(0,i.kt)("h3",{id:"models"},"Models"),(0,i.kt)("p",null,"  Any ",(0,i.kt)("inlineCode",{parentName:"p"},"t.struct")," that is passed to a generator of a ",(0,i.kt)("inlineCode",{parentName:"p"},"PrismaRuntime"),"\ndefines a model.\nModels must have an ID field specified by the ",(0,i.kt)("inlineCode",{parentName:"p"},'"id"')," config."),(0,i.kt)("p",null,"  Here is the list of all the available configs for model fields:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Config"),(0,i.kt)("th",{parentName:"tr",align:null},"Effect"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"id")),(0,i.kt)("td",{parentName:"tr",align:null},"defines the field ID for the model (a.k.a. primary key)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"auto")),(0,i.kt)("td",{parentName:"tr",align:null},"the value of this field can be auto generated; supported for ",(0,i.kt)("inlineCode",{parentName:"td"},"t.integer()")," (auto-increment) and ",(0,i.kt)("inlineCode",{parentName:"td"},"t.uuid()"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"unique")),(0,i.kt)("td",{parentName:"tr",align:null},"make this field unique among all instances of the model")))),(0,i.kt)("h3",{id:"relationships"},"Relationships"),(0,i.kt)("p",null,"  Relationship fields must be defined on both sides of the relationship.\nA relationship is always defined for ",(0,i.kt)("inlineCode",{parentName:"p"},"t.struct")," types and ",(0,i.kt)("inlineCode",{parentName:"p"},"t.optional")," or\n",(0,i.kt)("inlineCode",{parentName:"p"},"t.array")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"t.struct"),"s."),(0,i.kt)("p",null,"  Relatioships can also be defined implicitly using the ",(0,i.kt)("a",{parentName:"p",href:"#link"},(0,i.kt)("inlineCode",{parentName:"a"},"link"))," instance method\nof ",(0,i.kt)("inlineCode",{parentName:"p"},"PrismaRuntime"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'runtime = PrismaRuntime("example", "POSTGRES")\n\nuser = t.struct(\n    {\n        "id": t.uuid().config("id", "auto"),\n        "email": t.email().config("unique"),\n        "posts": t.array(g("Post")),\n    }\n).named("User")\n\npost = t.struct(\n    {\n        "id": t.uuid().config("id", "auto"),\n        "title": t.string(),\n        "author": g("User"),\n    }\n).named("Post")\n')),(0,i.kt)("p",null,"  The ",(0,i.kt)("inlineCode",{parentName:"p"},"PrismaRuntime")," supports two kinds of relationship between models."),(0,i.kt)("h4",{id:"one-to-one-relationships"},"One-to-one relationships"),(0,i.kt)("p",null,"  A one-to-one relationship must be in one of these two variants."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Cardinality"),(0,i.kt)("th",{parentName:"tr",align:null},"Field type in Model1"),(0,i.kt)("th",{parentName:"tr",align:null},"Field type in Model2"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"1..1 \u2194 0..1"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'g("Model2")')),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'g("Model1").optional()'))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0..1 \u2194 0..1"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'g("Model2").optional()')),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'g("Model1").optional()'))))),(0,i.kt)("p",null,"  For the optional (0..1 \u2194 0..1) one-to-one relationship,\nyou need to indicate on which field/model the foreign key will be by:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"wrapping the type in a ",(0,i.kt)("a",{parentName:"p",href:"#link"},(0,i.kt)("inlineCode",{parentName:"a"},"runtime.link(.)"))," with ",(0,i.kt)("inlineCode",{parentName:"p"},"fkey=True"),":\n",(0,i.kt)("inlineCode",{parentName:"p"},'runtime.link(g("Model2").optional(), fkey=True)'),";",(0,i.kt)("br",null))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"or adding ",(0,i.kt)("inlineCode",{parentName:"p"},'.config("unique")'),": ",(0,i.kt)("inlineCode",{parentName:"p"},'g("Model2").optional().config("unique")'),"."),(0,i.kt)("h4",{parentName:"li",id:"one-to-many-relationships"},"One-to-many relationships"),(0,i.kt)("p",{parentName:"li"},"A one-to-many relationship must be in one of these two variants."),(0,i.kt)("table",{parentName:"li"},(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Cardinality"),(0,i.kt)("th",{parentName:"tr",align:null},"Field type in Model1"),(0,i.kt)("th",{parentName:"tr",align:null},"Field type in Model2"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"1..1 \u2194 0..n"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'g("Model2")')),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'t.array(g("Model1"))'))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0..1 \u2194 0..n"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'g("Model2").optional()')),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'t.array(g("Model1"))'))))),(0,i.kt)("h3",{parentName:"li",id:"generators"},"Generators"),(0,i.kt)("p",{parentName:"li"},"Generators are instance methods of ",(0,i.kt)("inlineCode",{parentName:"p"},"PrismaRuntime")," that can be used\nto generate a ",(0,i.kt)("inlineCode",{parentName:"p"},"t.func")," that represents a specific operation on a specific\nmodel of the runtime.\nThey match to the model queries defined for the\n",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/reference/api-reference/prisma-client-reference"},"prisma client API"),".\nfor the type of the input ",(0,i.kt)("inlineCode",{parentName:"p"},"t.struct")," and the return type."))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'with TypeGraph("prisma-runtime-example") as g:\n    db = PrismaRuntime("main_db", "DB_CONNECTION")\n\n    user = t.struct(\n        {\n            "id": t.uuid().config("id", "auto"),\n            "email": t.email(),\n        }\n    )\n\n    g.expose(\n        createUser=db.create(user).add_policy(public),\n        findUser=db.find_unique(user).add_policy(public),\n        findManyUsers=db.find_many(user).add_policy(public),\n    )\n')),(0,i.kt)("p",null,"  Here is a list of all available generators:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"find_unique")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"find_many")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"create")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"update")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"delete")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"delete_many"))),(0,i.kt)("h4",{id:"link"},"link"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def link(typ: Union[t.TypeNode, str],\n         name: Optional[str] = None,\n         *,\n         field: Optional[str] = None,\n         fkey: Optional[bool] = None) -> t.TypeNode\n")),(0,i.kt)("p",null,"Explicitly declare a relationship between models. The return value of\nthis function shall be the type of a property of a ",(0,i.kt)("inlineCode",{parentName:"p"},"t.struct")," that\ndefines a model.\nIf the other end of the relationship is also defined using ",(0,i.kt)("inlineCode",{parentName:"p"},"link"),",\nboth links must have the same name."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name")," - name of the relationship"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"field")," - name of the target field on the target model")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'runtime = PrismaRuntime("example", "POSTGRES")\n\nuser = t.struct(\n    {\n        "id": t.uuid().config("id", "auto"),\n        "email": t.email().config("unique"),\n        "posts": runtime.link(t.array(g("Post")), "postAuthor"),\n    }\n).named("User")\n\npost = t.struct(\n    {\n        "id": t.uuid().config("id", "auto"),\n        "title": t.string(),\n        "author": runtime.link(g("User"), "postAuthor"),\n    }\n).named("Post")\n')),(0,i.kt)("h4",{id:"queryraw"},"queryRaw"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def queryRaw(query: str, out: t.TypeNode, *, effect: Effect) -> t.func\n")),(0,i.kt)("p",null,"Generate a raw SQL query operation on the runtime"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'db = PrismaRuntime("my-app", "POSTGRES")\ng.expose(\n    countUsers=db.queryRaw("SELECT COUNT(*) FROM User", t.integer())\n)\n')),(0,i.kt)("h4",{id:"executeraw"},"executeRaw"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def executeRaw(query: str, *, effect: Effect) -> t.func\n")),(0,i.kt)("p",null,"Generate a raw SQL query operation without return"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'db = PrismaRuntime("my-app", "POSTGRES")\ng.expose(\n    setActive=db.executeRaw("UPDATE User SET active = TRUE WHERE id=$1", effect=effects.update()),\n)\n')))}u.isMDXComponent=!0}}]);
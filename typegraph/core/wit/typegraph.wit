
interface core {
  record tpe {
    id: u32
  }

  union out {
    tpe,
    string,
    s32,
    u32
  }

  record %integer-constraints {
    min: option<s32>,
    max: option<s32>,
  }

  integerb: func(data: %integer-constraints) -> tpe
  %type-as-integer: func(id: u32) -> option<%integer-constraints>

  record %struct-constraints {
    props: list<tuple<string, u32>>,
  }

  structb: func(data: %struct-constraints) -> tpe
  %type-as-struct: func(id: u32) -> option<%struct-constraints>

  %get-type-repr: func(id: u32) -> option<string>
}

default world typegraph {
  import print: func(msg: string)

  export core: self.core
}

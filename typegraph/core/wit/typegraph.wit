
interface core {

  type error = string

  record typegraph-init-params {
    name: string,
  }

  init-typegraph: func(params: typegraph-init-params) -> result<_, error>
  finalize-typegraph: func() -> result<string, error>

  type type-id = u32

  variant type-ref {
    id(type-id),
    name(string),
  }

  record type-base {
    name: option<string>,
  }

  record type-integer {
    min: option<s64>,
    max: option<s64>,
  }

  integerb: func(data: type-integer) -> result<type-id, error>
  type-as-integer: func(ref: type-ref) -> result<tuple<type-id, type-base, type-integer>, error>

  record type-struct {
    props: list<tuple<string, type-ref>>,
  }

  structb: func(data: type-struct) -> result<type-id, error>
  type-as-struct: func(id: type-ref) -> result<tuple<type-id, type-base, type-struct>, error>

  get-type-repr: func(id: type-ref) -> result<string, error>

  record type-func {
    inp: type-ref,
    out: type-ref,
  }
  funcb: func(data: type-func) -> result<type-id, error>

  expose: func(fns: list<tuple<string, type-ref>>, namespace: list<string>) -> result<_, error>
}

default world typegraph {
  import print: func(msg: string)

  export core: self.core
}

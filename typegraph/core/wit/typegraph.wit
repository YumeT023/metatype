
interface core {
  record tpe {
    id: u32
  }

  union out {
    tpe,
    string,
    s32,
    u32
  }

  record integer-constraints {
    min: option<s64>,
    max: option<s64>,
  }

  integerb: func(data: integer-constraints) -> tpe
  type-as-integer: func(id: u32) -> option<integer-constraints>

  record struct-constraints {
    props: list<tuple<string, u32>>,
  }

  structb: func(data: struct-constraints) -> tpe
  type-as-struct: func(id: u32) -> option<struct-constraints>

  get-type-repr: func(id: u32) -> string

  record func-constraints {
    inp: u32,
    out: u32,
  }
  funcb: func(data: func-constraints) -> result<tpe, string>

  expose: func(fns: list<tuple<string, u32>>, namespace: list<string>) -> result<_, string>

  serialize: func() -> result<string, string>
}

default world typegraph {
  import print: func(msg: string)

  export core: self.core
}

[{"title":"Meta CLI","type":0,"sectionRef":"#","url":"/docs/concepts/meta-cli","content":"Meta CLI augmented coding vs codegen","keywords":""},{"title":"Overview","type":0,"sectionRef":"#","url":"/docs/concepts/overview","content":"","keywords":""},{"title":"What's Metatype?​","type":1,"pageTitle":"Overview","url":"/docs/concepts/overview#whats-metatype","content":"Metatype is a composition ecosystem for developers. It allows to build autonomous, discoverable, and modular API blocks with serverless orchestration. These building blocks enable developers to iterate faster, remain agile as the stack grow and focus on domain design rather than implementation. The ecosystem consists of the following parts: Typegraph: a package to describe graphs of types and their compositionsTypegate: a scalable and fast API gateway that optimize requestsMeta CLI: a command-line tool for smooth developer experience - DX  "},{"title":"Why Metatype ?​","type":1,"pageTitle":"Overview","url":"/docs/concepts/overview#why-metatype-","content":"As a project/product/start-up evolves, the technological stack becomes a challenging place where initiatives collides and efficiency struggles. Especially: validating data objects at multiple levels (e.g. front, back, storage, underlying services)hiring talented engineers become a bottlenecknew API or data consumers arise (e.g. new partner/team/tools)technical debt become unhealthy topicsnew features expand features and the modelling domainsconstrained technological progress and innovation by current statecomplexity and frictions decrease developer experiencesecurity and observability needs widen Metatype provides an abstraction layer to enable API composition and tackle with agility the above scenarii. 5W1H\tSpecialized API\tMetatypeWhy (goal)\tproject defined\towned by clients How (logic)\tserver code\tcompose with materializers What (content)\tserver defined\tclient selects from types Where (execution)\tsingle environment\torchestrate runtimes Who (authentication)\thard-coded rules\tcontrolled by policies When (event)\tbased on requests\tbased on triggers "},{"title":"Types​","type":1,"pageTitle":"Overview","url":"/docs/concepts/overview#types","content":"A graph of types or typegraph defines a type system describing all data objects processed in Metatype. This data structure is the primary building block of the system and can be extended by the user. t.struct({ &quot;id&quot;: t.string().id, &quot;age&quot;: t.integer(), &quot;cars&quot;: t.struct({ &quot;name&quot;: t.string().s_optional() }) })  Taking the analogy of a Postgres database, this is similar to SQL data definition language (DDL) and is not limited to tabular data. "},{"title":"Materializers​","type":1,"pageTitle":"Overview","url":"/docs/concepts/overview#materializers","content":"The type system also supports first-order types which are specified by providing a materializer. This provides support for transforming between two types. t.func(t.struct({&quot;name&quot;: t.string()}), t.string(), deno.FunMat(&quot;sayHello&quot;))  The equivalent is SQL would be joins, functions or aliases. "},{"title":"Runtimes​","type":1,"pageTitle":"Overview","url":"/docs/concepts/overview#runtimes","content":"Materializers alone are not enough to perform the transformations. A materializer should also define in which runtime the transform will be operated. In SQL, the runtime would be the database running the queries. "},{"title":"Policies​","type":1,"pageTitle":"Overview","url":"/docs/concepts/overview#policies","content":"Policies are a special type of materializer t.struct({}) =&gt; t.boolean() and can be attached to any type. It determines on evaluation whether one of the polices authorizes the callee to access it. Row level security (RLS) is similar for a Postgres database. "},{"title":"Triggers​","type":1,"pageTitle":"Overview","url":"/docs/concepts/overview#triggers","content":"Materializers can be triggered by a HTTP requests or any general purpose events. "},{"title":"GraphQL support​","type":1,"pageTitle":"Overview","url":"/docs/concepts/overview#graphql-support","content":"Once a typegraph is defined, it can be projected to GraphQL and become compatible with GraphQL queries/mutations. This is the most convient way to interact with a typegraph for now. However the system could also support other query language and should not be limited to what GraphQL offers. "},{"title":"Typegate","type":0,"sectionRef":"#","url":"/docs/concepts/typegate","content":"Typegate","keywords":""},{"title":"Typegraph","type":0,"sectionRef":"#","url":"/docs/concepts/typegraph","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Typegraph","url":"/docs/concepts/typegraph#types","content":""},{"title":"Runtimes​","type":1,"pageTitle":"Typegraph","url":"/docs/concepts/typegraph#runtimes","content":""},{"title":"Materializers​","type":1,"pageTitle":"Typegraph","url":"/docs/concepts/typegraph#materializers","content":""},{"title":"Policies​","type":1,"pageTitle":"Typegraph","url":"/docs/concepts/typegraph#policies","content":"Loading... "},{"title":"Importers","type":0,"sectionRef":"#","url":"/docs/concepts/typegraph/importers","content":"Importers","keywords":""},{"title":"Policies","type":0,"sectionRef":"#","url":"/docs/concepts/typegraph/policies","content":"","keywords":""},{"title":"Allow all​","type":1,"pageTitle":"Policies","url":"/docs/concepts/typegraph/policies#allow-all","content":"from typegraph import policies from typegraph.graphs.typegraph import TypeGraph from typegraph.materializers.graphql import GraphQLRuntime from typegraph.types import types as t with TypeGraph(&quot;allow_all&quot;) as g: remote = GraphQLRuntime(&quot;https://graphqlzero.almansi.me/api&quot;) allow_all = policies.allow_all() post = t.struct( { &quot;id&quot;: t.integer(), &quot;title&quot;: t.string(), &quot;body&quot;: t.string(), } ).named(&quot;Post&quot;) getter = remote.query(t.struct({&quot;id&quot;: t.integer()}), t.optional(post)).add_policy( policies.allow_all() ) g.expose(post=getter)  "},{"title":"Runtimes","type":0,"sectionRef":"#","url":"/docs/concepts/typegraph/runtimes","content":"Runtimes","keywords":""},{"title":"How-to contribute","type":0,"sectionRef":"#","url":"/docs/guides/contribute","content":"","keywords":""},{"title":"Prerequisite​","type":1,"pageTitle":"How-to contribute","url":"/docs/guides/contribute#prerequisite","content":"Install Rust,pythonpipx andpnpm. "},{"title":"Getting started​","type":1,"pageTitle":"How-to contribute","url":"/docs/guides/contribute#getting-started","content":""},{"title":"Toolset​","type":1,"pageTitle":"How-to contribute","url":"/docs/guides/contribute#toolset","content":"cargo install cargo-watch cargo install cargo-edit cargo install --force --git https://github.com/zifeo/whiz pipx install pre-commit pipx install poetry deno install -Afq -n deno_bindgen https://deno.land/x/deno_bindgen/cli.ts  "},{"title":"Init workspace​","type":1,"pageTitle":"How-to contribute","url":"/docs/guides/contribute#init-workspace","content":"pre-commit install python3 -m venv typegraph/.venv python3 -m venv examples/.venv cd typegraph poetry install cd .. cd examples poetry install cd .. cd website pnpm install cd .. whiz  "},{"title":"Tests​","type":1,"pageTitle":"How-to contribute","url":"/docs/guides/contribute#tests","content":"typegate/test.sh --quiet typegate/test-all.sh --quiet # on Linux (otherwise segfaulting)  "},{"title":"Reference","type":0,"sectionRef":"#","url":"/docs/reference","content":"Reference","keywords":""},{"title":"How-to upload images to S3","type":0,"sectionRef":"#","url":"/docs/guides/upload-files","content":"","keywords":""},{"title":"Typegraph​","type":1,"pageTitle":"How-to upload images to S3","url":"/docs/guides/upload-files#typegraph","content":"TG_RETREND_ACCESS_KEY=minio TG_RETREND_SECRET_KEY=password  from typegraph.graphs.typegraph import TypeGraph from typegraph.materializers.s3 import S3Runtime from typegraph.policies import allow_all with TypeGraph( &quot;retrend&quot;, ) as g: all = allow_all() s3 = S3Runtime(&quot;http://localhost:9000&quot;, &quot;local&quot;, &quot;access_key&quot;, &quot;secret_key&quot;) g.expose( presigned=s3.sign(&quot;bucket&quot;, &quot;image/png&quot;).add_policy(all), )  "},{"title":"Usage​","type":1,"pageTitle":"How-to upload images to S3","url":"/docs/guides/upload-files#usage","content":"const image = await Deno.readFile(&quot;website/static/img/logo.png&quot;); const { data: { presigned } } = await fetch(&quot;http://localhost:7891/retrend&quot;, { method: &quot;POST&quot;, body: JSON.stringify({ &quot;query&quot;: ` query sign($length: Int) { presigned(length: $length, path: &quot;my-super-image.png&quot;) } `, &quot;variables&quot;: { &quot;length&quot;: image.length, }, }), }).then((r) =&gt; r.json()); const upload = await fetch( presigned, { method: &quot;PUT&quot;, body: image, headers: { &quot;content-type&quot;: &quot;image/png&quot;, &quot;content-length&quot;: image.length, }, }, ); console.log(upload.status);  "},{"title":"metatype","type":0,"sectionRef":"#","url":"/docs/shared/metatype","content":"metatype Metatype is a composition ecosystem for developers. It allows to build autonomous, discoverable, and modular API blocks with serverless orchestration. These building blocks enable developers to iterate faster, remain agile as the stack grow and focus on domain design rather than implementation. The ecosystem consists of the following parts: Typegraph: a package to describe graphs of types and their compositionsTypegate: a scalable and fast API gateway that optimize requestsMeta CLI: a command-line tool for smooth developer experience - DX","keywords":""},{"title":"Changelog","type":0,"sectionRef":"#","url":"/docs/reference/changelog","content":"","keywords":""},{"title":"v0.0.2-alpha.7 (11/27/2022)​","type":1,"pageTitle":"Changelog","url":"/docs/reference/changelog#v002-alpha7-11272022","content":"Full Changelog: https://github.com/metatypedev/metatype/compare/v0.0.2-alpha.6...v0.0.2-alpha.7 "},{"title":"v0.0.2-alpha.6 (11/27/2022)​","type":1,"pageTitle":"Changelog","url":"/docs/reference/changelog#v002-alpha6-11272022","content":""},{"title":"Your first typegraph","type":0,"sectionRef":"#","url":"/docs/tutorials/first-typegraph","content":"Your first typegraph test from typegraph.graphs.typegraph import TypeGraph from typegraph.materializers.deno import FunMat from typegraph.materializers.graphql import GraphQLRuntime from typegraph.policies import Policy from typegraph.types import types as t with TypeGraph(&quot;mini&quot;) as g: remote = GraphQLRuntime(&quot;https://graphqlzero.almansi.me/api&quot;) allow_all = Policy(FunMat(&quot;() =&gt; true&quot;)).named(&quot;allow_all_policy&quot;) post = t.struct( { &quot;id&quot;: t.integer(), &quot;title&quot;: t.string(), &quot;body&quot;: t.string(), } ).named(&quot;Post&quot;) getter = remote.query(t.struct({&quot;id&quot;: t.integer()}), t.optional(post)).add_policy( allow_all ) g.expose(post=getter) ","keywords":""},{"title":"API gateway vs API mesh","type":0,"sectionRef":"#","url":"/docs/use-cases/api-gateway","content":"API gateway vs API mesh","keywords":""},{"title":"Backend for frontend","type":0,"sectionRef":"#","url":"/docs/use-cases/backend-for-frontend","content":"Backend for frontend","keywords":""},{"title":"Getting started","type":0,"sectionRef":"#","url":"/docs/tutorials/getting-started","content":"","keywords":""},{"title":"Introduction​","type":1,"pageTitle":"Getting started","url":"/docs/tutorials/getting-started#introduction","content":"In this tutorial, you will write your first typegraph and deploy it on the typegate using the Meta CLI. You will design some API blocks for a chat-based app where users can discuss together and share products. Looking first for explanation? For concepts, head over to the overview to understand the ecosystem. Running the ecosystem requires Python &gt;= 3.8 which should be available on most the recent OS by default. LinuxMacOSWindows sudo apt-get update sudo apt-get install python3 python3-pip  "},{"title":"Quickstart with Metatype Cloud​","type":1,"pageTitle":"Getting started","url":"/docs/tutorials/getting-started#quickstart-with-metatype-cloud","content":"This is the easiest way to get started, yet it's still in private beta. You can sign-up for the waiting list below.  "},{"title":"Quickstart with Docker​","type":1,"pageTitle":"Getting started","url":"/docs/tutorials/getting-started#quickstart-with-docker","content":""},{"title":"1. meta CLI​","type":1,"pageTitle":"Getting started","url":"/docs/tutorials/getting-started#1-meta-cli","content":"You can download the binary executable fromreleases, make it executable and add it to your $PATH or useeget to automate that step. eget metatypedev/metatype --to $HOME/.local/bin meta --help meta upgrade  "},{"title":"2. typegraph package​","type":1,"pageTitle":"Getting started","url":"/docs/tutorials/getting-started#2-typegraph-package","content":"python3 -m venv .venv .venv/bin/activate pip3 install typegraph --upgrade python3 -c 'import typegraph; print(typegraph.version)'  "},{"title":"3. typegate node​","type":1,"pageTitle":"Getting started","url":"/docs/tutorials/getting-started#3-typegate-node","content":"curl https://raw.githubusercontent.com/metatypedev/metatype/main/examples/docker-compose.yml -o docker-compose.yml docker compose up -d curl -X POST http://localhost:7890/typegate \\ -H 'Authorization: Basic YWRtaW46cGFzc3dvcmQ=' \\ --data-binary '{&quot;query&quot;:&quot;query list { typegraphs { name }}&quot;}'  "},{"title":"Alternatively, install from source​","type":1,"pageTitle":"Getting started","url":"/docs/tutorials/getting-started#alternatively-install-from-source","content":"pip3 install --upgrade git+https://github.com/metatypedev/metatype#subdirectory=typegraph cargo install --force meta --git https://github.com/metatypedev/metatype  "},{"title":"End to end typing","type":0,"sectionRef":"#","url":"/docs/use-cases/end-to-end-typing","content":"End to end typing","keywords":""}]
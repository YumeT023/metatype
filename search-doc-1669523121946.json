[{"title":"Meta CLI","type":0,"sectionRef":"#","url":"/docs/concepts/meta","content":"Meta CLI augmented coding vs codegen","keywords":""},{"title":"Overview","type":0,"sectionRef":"#","url":"/docs/concepts/overview","content":"","keywords":""},{"title":"What is Metatype ?​","type":1,"pageTitle":"Overview","url":"/docs/concepts/overview#what-is-metatype-","content":"Metatype is a composition ecosystem for developers. It allows to build autonomous, discoverable, and modular API blocks with serverless orchestration. These building blocks enable developers to iterate faster, remain agile as the stack grow and focus on domain design rather than implementation. The ecosystem consists of the following parts: Typegraph: a package to describe graphs of types and their compositionsTypegate: a fast and secure API-agnostic extensible gatewayMeta: a command-line tool for smooth developer experience (DX) and deployment  "},{"title":"Why Metatype ?​","type":1,"pageTitle":"Overview","url":"/docs/concepts/overview#why-metatype-","content":"As a project/product/start-up evolves, the technological stack becomes a challenging place where initiatives collides and efficiency struggles. Especially: validating data objects at multiple levels (e.g. front, back, storage, underlying services)hiring talented engineers become a bottlenecknew API or data consumers arise (e.g. new partner/team/tools)technical debt become unhealthy topicsnew features expand features and the modelling domainsconstrained technological progress and innovation by current statecomplexity and frictions decrease developer experiencesecurity and observability needs widen Metatype provides an abstraction layer to enable API composition and tackle with agility the above scenarii. 5W1H\tSpecialized API\tMetatypeWhy (goal)\tproject defined\towned by clients How (logic)\tserver code\tcompose with materializers What (content)\tserver defined\tclient selects from types Where (execution)\tsingle environment\torchestrate runtimes Who (authentication)\thard-coded rules\tcontrolled by policies When (event)\tbased on requests\tbased on triggers "},{"title":"Types​","type":1,"pageTitle":"Overview","url":"/docs/concepts/overview#types","content":"A graph of types or typegraph defines a type system describing all data objects processed in Metatype. This data structure is the primary building block of the system and can be extended by the user. t.struct({ &quot;id&quot;: t.string().id, &quot;age&quot;: t.integer(), &quot;cars&quot;: t.struct({ &quot;name&quot;: t.string().s_optional() }) })  Taking the analogy of a Postgres database, this is similar to SQL data definition language (DDL) and is not limited to tabular data. "},{"title":"Materializers​","type":1,"pageTitle":"Overview","url":"/docs/concepts/overview#materializers","content":"The type system also supports first-order types which are specified by providing a materializer. This provides support for transforming between two types. t.func(t.struct({&quot;name&quot;: t.string()}), t.string(), deno.FunMat(&quot;sayHello&quot;))  The equivalent is SQL would be joins, functions or aliases. "},{"title":"Runtimes​","type":1,"pageTitle":"Overview","url":"/docs/concepts/overview#runtimes","content":"Materializers alone are not enough to perform the transformations. A materializer should also define in which runtime the transform will be operated. In SQL, the runtime would be the database running the queries. "},{"title":"Policies​","type":1,"pageTitle":"Overview","url":"/docs/concepts/overview#policies","content":"Policies are a special type of materializer t.struct({}) =&gt; t.boolean() and can be attached to any type. It determines on evaluation whether one of the polices authorizes the callee to access it. Row level security (RLS) is similar for a Postgres database. "},{"title":"Triggers​","type":1,"pageTitle":"Overview","url":"/docs/concepts/overview#triggers","content":"Materializers can be triggered by a HTTP requests or any general purpose events. "},{"title":"GraphQL support​","type":1,"pageTitle":"Overview","url":"/docs/concepts/overview#graphql-support","content":"Once a typegraph is defined, it can be projected to GraphQL and become compatible with GraphQL queries/mutations. This is the most convient way to interact with a typegraph for now. However the system could also support other query language and should not be limited to what GraphQL offers. "},{"title":"Typegate","type":0,"sectionRef":"#","url":"/docs/concepts/typegate","content":"Typegate","keywords":""},{"title":"Importers","type":0,"sectionRef":"#","url":"/docs/concepts/typegraph/importers","content":"Importers","keywords":""},{"title":"Policies","type":0,"sectionRef":"#","url":"/docs/concepts/typegraph/policies","content":"","keywords":""},{"title":"Allow all​","type":1,"pageTitle":"Policies","url":"/docs/concepts/typegraph/policies#allow-all","content":"from typegraph import policies from typegraph.graphs.typegraph import TypeGraph from typegraph.materializers.graphql import GraphQLRuntime from typegraph.types import types as t with TypeGraph(&quot;allow_all&quot;) as g: remote = GraphQLRuntime(&quot;https://graphqlzero.almansi.me/api&quot;) allow_all = policies.allow_all() post = t.struct( { &quot;id&quot;: t.integer(), &quot;title&quot;: t.string(), &quot;body&quot;: t.string(), } ).named(&quot;Post&quot;) getter = remote.query(t.struct({&quot;id&quot;: t.integer()}), t.optional(post)).add_policy( policies.allow_all() ) g.expose(post=getter)  "},{"title":"Typegraph","type":0,"sectionRef":"#","url":"/docs/concepts/typegraph","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Typegraph","url":"/docs/concepts/typegraph#types","content":""},{"title":"Runtimes​","type":1,"pageTitle":"Typegraph","url":"/docs/concepts/typegraph#runtimes","content":""},{"title":"Materializers​","type":1,"pageTitle":"Typegraph","url":"/docs/concepts/typegraph#materializers","content":""},{"title":"Policies​","type":1,"pageTitle":"Typegraph","url":"/docs/concepts/typegraph#policies","content":""},{"title":"Runtimes","type":0,"sectionRef":"#","url":"/docs/concepts/typegraph/runtimes","content":"Runtimes","keywords":""},{"title":"How-to contribute","type":0,"sectionRef":"#","url":"/docs/how-to-guides/contribute","content":"","keywords":""},{"title":"Prerequisite​","type":1,"pageTitle":"How-to contribute","url":"/docs/how-to-guides/contribute#prerequisite","content":"Install Rust,pythonpipx andpnpm. "},{"title":"Getting started​","type":1,"pageTitle":"How-to contribute","url":"/docs/how-to-guides/contribute#getting-started","content":""},{"title":"Toolset​","type":1,"pageTitle":"How-to contribute","url":"/docs/how-to-guides/contribute#toolset","content":"cargo install cargo-watch cargo install cargo-edit cargo install --force --git https://github.com/zifeo/whiz pipx install pre-commit pipx install poetry deno install -Afq -n deno_bindgen https://deno.land/x/deno_bindgen/cli.ts  "},{"title":"Init workspace​","type":1,"pageTitle":"How-to contribute","url":"/docs/how-to-guides/contribute#init-workspace","content":"pre-commit install python3 -m venv typegraph/.venv python3 -m venv examples/.venv cd typegraph poetry install cd .. cd examples poetry install cd .. cd website pnpm install cd .. whiz  "},{"title":"Tests​","type":1,"pageTitle":"How-to contribute","url":"/docs/how-to-guides/contribute#tests","content":"typegate/test.sh --quiet typegate/test-all.sh --quiet # on Linux (otherwise segfaulting)  "},{"title":"How-to upload images to S3","type":0,"sectionRef":"#","url":"/docs/how-to-guides/upload-files","content":"","keywords":""},{"title":"Typegraph​","type":1,"pageTitle":"How-to upload images to S3","url":"/docs/how-to-guides/upload-files#typegraph","content":"TG_RETREND_ACCESS_KEY=minio TG_RETREND_SECRET_KEY=password  from typegraph.graphs.typegraph import TypeGraph from typegraph.materializers.s3 import S3Runtime from typegraph.policies import allow_all with TypeGraph( &quot;retrend&quot;, ) as g: all = allow_all() s3 = S3Runtime(&quot;http://localhost:9000&quot;, &quot;local&quot;, &quot;access_key&quot;, &quot;secret_key&quot;) g.expose( presigned=s3.sign(&quot;images&quot;, &quot;image/png&quot;).add_policy(all), )  "},{"title":"Usage​","type":1,"pageTitle":"How-to upload images to S3","url":"/docs/how-to-guides/upload-files#usage","content":"const image = await Deno.readFile(&quot;website/static/img/logo.png&quot;); const { data: { presigned } } = await fetch(&quot;http://localhost:7891/retrend&quot;, { method: &quot;POST&quot;, body: JSON.stringify({ &quot;query&quot;: ` query sign($length: Int) { presigned(length: $length, path: &quot;my-super-image.png&quot;) } `, &quot;variables&quot;: { &quot;length&quot;: image.length, }, }), }).then((r) =&gt; r.json()); const upload = await fetch( presigned, { method: &quot;PUT&quot;, body: image, headers: { &quot;content-type&quot;: &quot;image/png&quot;, &quot;content-length&quot;: image.length, }, }, ); console.log(upload.status);  "},{"title":"References","type":0,"sectionRef":"#","url":"/docs/references","content":"References","keywords":""},{"title":"Changelog","type":0,"sectionRef":"#","url":"/docs/references/changelog","content":"Changelog","keywords":""},{"title":"Learn","type":0,"sectionRef":"#","url":"/docs/tutorials/learn","content":"Learn","keywords":""},{"title":"Tutorial extra","type":0,"sectionRef":"#","url":"/docs/tutorials/tutorial-extras","content":"Tutorial extra","keywords":""},{"title":"Manage Docs Versions","type":0,"sectionRef":"#","url":"/docs/tutorials/tutorial-extras/manage-docs-versions","content":"","keywords":""},{"title":"Create a docs version​","type":1,"pageTitle":"Manage Docs Versions","url":"/docs/tutorials/tutorial-extras/manage-docs-versions#create-a-docs-version","content":"Release a version 1.0 of your project: npm run docusaurus docs:version 1.0  The docs folder is copied into versioned_docs/version-1.0 and versions.json is created. Your docs now have 2 versions: 1.0 at http://localhost:3000/docs/ for the version 1.0 docscurrent at http://localhost:3000/docs/next/ for the upcoming, unreleased docs "},{"title":"Add a Version Dropdown​","type":1,"pageTitle":"Manage Docs Versions","url":"/docs/tutorials/tutorial-extras/manage-docs-versions#add-a-version-dropdown","content":"To navigate seamlessly across versions, add a version dropdown. Modify the docusaurus.config.js file: docusaurus.config.js module.exports = { themeConfig: { navbar: { items: [ { type: 'docsVersionDropdown', }, ], }, }, };  The docs version dropdown appears in your navbar:  "},{"title":"Update an existing version​","type":1,"pageTitle":"Manage Docs Versions","url":"/docs/tutorials/tutorial-extras/manage-docs-versions#update-an-existing-version","content":"It is possible to edit versioned docs in their respective folder: versioned_docs/version-1.0/hello.md updates http://localhost:3000/docs/hellodocs/hello.md updates http://localhost:3000/docs/next/hello "},{"title":"Quickstart","type":0,"sectionRef":"#","url":"/docs/tutorials/quickstart","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Quickstart","url":"/docs/tutorials/quickstart#prerequisites","content":"You need Python 3.10 with Poetry 1.2 or higher. Docker is recommended for development. "},{"title":"Set up the environment​","type":1,"pageTitle":"Quickstart","url":"/docs/tutorials/quickstart#set-up-the-environment","content":"python3.10 -m venv .venv cat &lt;&lt;EOF &gt; pyproject.toml [tool.poetry] name = &quot;example&quot; version = &quot;0.1.0&quot; description = &quot;&quot; authors = [] [tool.poetry.dependencies] native = {path = &quot;native-0.1.0-cp310-cp310-linux_x86_64.whl&quot;} typegraph = {path = &quot;typegraph-0.1.0-py3-none-any.whl&quot;} [tool.poetry.dev-dependencies] black = &quot;^22.3.0&quot; [build-system] requires = [&quot;poetry-core&quot;] build-backend = &quot;poetry.core.masonry.api&quot; EOF poetry install poetry shell # activate virtual environment meta info  "},{"title":"Prepare dependencies​","type":1,"pageTitle":"Quickstart","url":"/docs/tutorials/quickstart#prepare-dependencies","content":"cat &lt;&lt;EOF &gt; docker-compose.yml services: typegate: image: registry.zifeo.com/metatype/metatype:latest ports: - &quot;7890:7890&quot; extra_hosts: - &quot;host.docker.internal:host-gateway&quot; environment: REDIS_URL: redis://:password@redis:6379/0 redis: image: redis:7 command: --requirepass password postgres: image: postgres:14 ports: - &quot;5432:5432&quot; environment: POSTGRES_DB: db POSTGRES_PASSWORD: password EOF docker compose up -d docker compose logs -f  "},{"title":"Create your first typegraph​","type":1,"pageTitle":"Quickstart","url":"/docs/tutorials/quickstart#create-your-first-typegraph","content":"from typegraph.graphs.typegraph import TypeGraph from typegraph.materializers import worker from typegraph.materializers.graphql import GraphQLRuntime from typegraph.types import types as t with TypeGraph(&quot;mini&quot;) as g: remote = GraphQLRuntime(&quot;https://graphqlzero.almansi.me/api&quot;) allow_all = t.policy( t.struct(), worker.JavascriptMat( worker.JavascriptMat.lift(lambda args: True), &quot;policy&quot;, ), ).named(&quot;allow_all_policy&quot;) post = t.struct( { &quot;id&quot;: t.integer(), &quot;title&quot;: t.string(), &quot;body&quot;: t.string(), } ).named(&quot;Post&quot;) getter = remote.query(t.struct({&quot;id&quot;: t.integer()}), t.optional(post)).add_policy( allow_all ) g.expose(post=getter)  "},{"title":"API gateway","type":0,"sectionRef":"#","url":"/docs/use-cases/api-gateway","content":"API gateway","keywords":""},{"title":"Backend for frontend","type":0,"sectionRef":"#","url":"/docs/use-cases/backend-for-frontend","content":"Backend for frontend","keywords":""},{"title":"Translate your site","type":0,"sectionRef":"#","url":"/docs/tutorials/tutorial-extras/translate-your-site","content":"","keywords":""},{"title":"Configure i18n​","type":1,"pageTitle":"Translate your site","url":"/docs/tutorials/tutorial-extras/translate-your-site#configure-i18n","content":"Modify docusaurus.config.js to add support for the fr locale: docusaurus.config.js module.exports = { i18n: { defaultLocale: 'en', locales: ['en', 'fr'], }, };  "},{"title":"Translate a doc​","type":1,"pageTitle":"Translate your site","url":"/docs/tutorials/tutorial-extras/translate-your-site#translate-a-doc","content":"Copy the docs/intro.md file to the i18n/fr folder: mkdir -p i18n/fr/docusaurus-plugin-content-docs/current/ cp docs/intro.md i18n/fr/docusaurus-plugin-content-docs/current/intro.md  Translate i18n/fr/docusaurus-plugin-content-docs/current/intro.md in French. "},{"title":"Start your localized site​","type":1,"pageTitle":"Translate your site","url":"/docs/tutorials/tutorial-extras/translate-your-site#start-your-localized-site","content":"Start your site on the French locale: npm run start -- --locale fr  Your localized site is accessible at http://localhost:3000/fr/ and the Getting Started page is translated. caution In development, you can only use one locale at a same time. "},{"title":"Add a Locale Dropdown​","type":1,"pageTitle":"Translate your site","url":"/docs/tutorials/tutorial-extras/translate-your-site#add-a-locale-dropdown","content":"To navigate seamlessly across languages, add a locale dropdown. Modify the docusaurus.config.js file: docusaurus.config.js module.exports = { themeConfig: { navbar: { items: [ { type: 'localeDropdown', }, ], }, }, };  The locale dropdown now appears in your navbar:  "},{"title":"Build your localized site​","type":1,"pageTitle":"Translate your site","url":"/docs/tutorials/tutorial-extras/translate-your-site#build-your-localized-site","content":"Build your site for a specific locale: npm run build -- --locale fr  Or build your site to include all the locales at once: npm run build  "},{"title":"End to end typing","type":0,"sectionRef":"#","url":"/docs/use-cases/end-to-end-typing","content":"End to end typing","keywords":""}]
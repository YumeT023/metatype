[{"title":"Meta CLI","type":0,"sectionRef":"#","url":"/docs/concepts/meta-cli","content":"Meta CLI augmented coding vs codegen","keywords":""},{"title":"Overview","type":0,"sectionRef":"#","url":"/docs/concepts/overview","content":"","keywords":""},{"title":"What's Metatype?​","type":1,"pageTitle":"Overview","url":"/docs/concepts/overview#whats-metatype","content":"Metatype is a composition ecosystem for developers. It allows to build autonomous, discoverable, and modular API blocks orchestration. These building blocks enable developers to iterate faster, remain agile as the stack grow and focus on domain design rather than implementation. The ecosystem consists of the following parts: Typegraph: a package to describe typegraphs (graphs of types) and their compositionsTypegate: a scalable and fast query engine (API orchestration) with serverless deploymentMeta CLI: a command-line tool to smooth the developer experience  "},{"title":"Why Metatype ?​","type":1,"pageTitle":"Overview","url":"/docs/concepts/overview#why-metatype-","content":"As a project/product/start-up evolves, the technological stack becomes a challenging place where initiatives collides and efficiency struggles. Especially: validating data objects at multiple levels (e.g. front, back, storage, underlying services)hiring talented engineers become a bottlenecknew API or data consumers arise (e.g. new partner/team/tools)technical debt become unhealthy topicsnew features expand features and the modelling domainsconstrained technological progress and innovation by current statecomplexity and frictions decrease developer experiencesecurity and observability needs widen Metatype provides an abstraction layer to enable API composition and tackle with agility the above scenarii. 5W1H\tSpecialized API\tMetatypeWhy (goal)\tproject defined\towned by clients How (logic)\tserver code\tcompose with materializers What (content)\tserver defined\tclient selects from types Where (execution)\tsingle environment\torchestrate runtimes Who (authentication)\thard-coded rules\tcontrolled by policies When (event)\tbased on requests\tbased on triggers "},{"title":"Types​","type":1,"pageTitle":"Overview","url":"/docs/concepts/overview#types","content":"A graph of types or typegraph defines a type system describing all data objects processed in Metatype. This data structure is the primary building block of the system and can be extended by the user. t.struct({ &quot;id&quot;: t.string().id, &quot;age&quot;: t.integer(), &quot;cars&quot;: t.struct({ &quot;name&quot;: t.string().s_optional() }) })  Taking the analogy of a Postgres database, this is similar to SQL data definition language (DDL) and is not limited to tabular data. "},{"title":"Materializers​","type":1,"pageTitle":"Overview","url":"/docs/concepts/overview#materializers","content":"The type system also supports first-order types which are specified by providing a materializer. This provides support for transforming between two types. t.func(t.struct({&quot;name&quot;: t.string()}), t.string(), deno.FunMat(&quot;sayHello&quot;))  The equivalent is SQL would be joins, functions or aliases. "},{"title":"Runtimes​","type":1,"pageTitle":"Overview","url":"/docs/concepts/overview#runtimes","content":"Materializers alone are not enough to perform the transformations. A materializer should also define in which runtime the transform will be operated. In SQL, the runtime would be the database running the queries. "},{"title":"Policies​","type":1,"pageTitle":"Overview","url":"/docs/concepts/overview#policies","content":"Policies are a special type of materializer t.struct({}) =&gt; t.boolean() and can be attached to any type. It determines on evaluation whether one of the polices authorizes the callee to access it. Row level security (RLS) is similar for a Postgres database. "},{"title":"Triggers​","type":1,"pageTitle":"Overview","url":"/docs/concepts/overview#triggers","content":"Materializers can be triggered by a HTTP requests or any general purpose events. "},{"title":"GraphQL support​","type":1,"pageTitle":"Overview","url":"/docs/concepts/overview#graphql-support","content":"Once a typegraph is defined, it can be projected to GraphQL and become compatible with GraphQL queries/mutations. This is the most convient way to interact with a typegraph for now. However the system could also support other query language and should not be limited to what GraphQL offers. "},{"title":"Typegate","type":0,"sectionRef":"#","url":"/docs/concepts/typegate","content":"Typegate","keywords":""},{"title":"Typegraph","type":0,"sectionRef":"#","url":"/docs/concepts/typegraph","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Typegraph","url":"/docs/concepts/typegraph#types","content":""},{"title":"Runtimes​","type":1,"pageTitle":"Typegraph","url":"/docs/concepts/typegraph#runtimes","content":""},{"title":"Materializers​","type":1,"pageTitle":"Typegraph","url":"/docs/concepts/typegraph#materializers","content":""},{"title":"Policies​","type":1,"pageTitle":"Typegraph","url":"/docs/concepts/typegraph#policies","content":""},{"title":"Policies","type":0,"sectionRef":"#","url":"/docs/concepts/typegraph/policies","content":"","keywords":""},{"title":"Allow all​","type":1,"pageTitle":"Policies","url":"/docs/concepts/typegraph/policies#allow-all","content":"from typegraph import policies from typegraph import t from typegraph import TypeGraph from typegraph.runtimes.graphql import GraphQLRuntime with TypeGraph(&quot;policies&quot;) as g: remote = GraphQLRuntime(&quot;https://graphqlzero.almansi.me/api&quot;) allow_all = policies.allow_all() post = t.struct( { &quot;id&quot;: t.integer(), &quot;title&quot;: t.string(), &quot;body&quot;: t.string(), } ).named(&quot;Post&quot;) getter = remote.query(t.struct({&quot;id&quot;: t.integer()}), t.optional(post)).add_policy( policies.allow_all() ) g.expose(post=getter)  "},{"title":"Importers","type":0,"sectionRef":"#","url":"/docs/concepts/typegraph/importers","content":"Importers","keywords":""},{"title":"Runtimes","type":0,"sectionRef":"#","url":"/docs/concepts/typegraph/runtimes","content":"Runtimes","keywords":""},{"title":"How-to contribute","type":0,"sectionRef":"#","url":"/docs/guides/contribute","content":"","keywords":""},{"title":"Prerequisite​","type":1,"pageTitle":"How-to contribute","url":"/docs/guides/contribute#prerequisite","content":"Install: RustPythonpipxpNpmDenoNode "},{"title":"Getting started​","type":1,"pageTitle":"How-to contribute","url":"/docs/guides/contribute#getting-started","content":""},{"title":"Essential packages for Linux / WSL​","type":1,"pageTitle":"How-to contribute","url":"/docs/guides/contribute#essential-packages-for-linux--wsl","content":"sudo apt install build-essential sudo apt install unzip sudo apt install pkg-config libssl-dev  "},{"title":"Toolset​","type":1,"pageTitle":"How-to contribute","url":"/docs/guides/contribute#toolset","content":"cargo install cargo-watch cargo install cargo-edit cargo install --git https://github.com/zifeo/whiz --locked apt install -y protobuf-compiler pipx install pre-commit pipx install poetry deno install -Afq -n deno_bindgen https://deno.land/x/deno_bindgen/cli.ts  "},{"title":"Init workspace​","type":1,"pageTitle":"How-to contribute","url":"/docs/guides/contribute#init-workspace","content":"pre-commit install python3 -m venv .venv python3 -m venv examples/.venv cd typegraph source ../.venv/bin/activate poetry install deactivate cd .. cd examples poetry install cd .. cd website pnpm install cd .. cd typegate cp .env.sample .env cd .. whiz  "},{"title":"Tests​","type":1,"pageTitle":"How-to contribute","url":"/docs/guides/contribute#tests","content":"docker compose -f dev/docker-compose.yml up -d cargo test deno run -A dev/test.ts cd typegraph &amp;&amp; pytest -s docker compose -f dev/docker-compose.yml down  "},{"title":"How-to upload images to S3","type":0,"sectionRef":"#","url":"/docs/guides/upload-files","content":"","keywords":""},{"title":"Typegraph​","type":1,"pageTitle":"How-to upload images to S3","url":"/docs/guides/upload-files#typegraph","content":"TG_RETREND_ACCESS_KEY=minio TG_RETREND_SECRET_KEY=password  from typegraph.graphs.typegraph import TypeGraph from typegraph.materializers.s3 import S3Runtime from typegraph.policies import allow_all with TypeGraph( &quot;retrend&quot;, ) as g: all = allow_all() s3 = S3Runtime(&quot;http://localhost:9000&quot;, &quot;local&quot;, &quot;access_key&quot;, &quot;secret_key&quot;) g.expose( presigned=s3.sign(&quot;bucket&quot;, &quot;image/png&quot;).add_policy(all), )  "},{"title":"Usage​","type":1,"pageTitle":"How-to upload images to S3","url":"/docs/guides/upload-files#usage","content":"const image = await Deno.readFile(&quot;website/static/img/logo.png&quot;); const { data: { presigned } } = await fetch(&quot;http://localhost:7891/retrend&quot;, { method: &quot;POST&quot;, body: JSON.stringify({ &quot;query&quot;: ` query sign($length: Int) { presigned(length: $length, path: &quot;my-super-image.png&quot;) } `, &quot;variables&quot;: { &quot;length&quot;: image.length, }, }), }).then((r) =&gt; r.json()); const upload = await fetch( presigned, { method: &quot;PUT&quot;, body: image, headers: { &quot;content-type&quot;: &quot;image/png&quot;, &quot;content-length&quot;: image.length, }, }, ); console.log(upload.status);  "},{"title":"Mutations","type":0,"sectionRef":"#","url":"/docs/reference/typegate/prisma-migration/mutations","content":"","keywords":""},{"title":"apply​","type":1,"pageTitle":"Mutations","url":"/docs/reference/typegate/prisma-migration/mutations#apply","content":"Type: object_22! apply field Policies: admin_only Arguments Name\tDescriptionresetDatabase Boolean! resetDatabase input field migrations String migrations input field runtime String runtime input field typegraph String! typegraph input field "},{"title":"create​","type":1,"pageTitle":"Mutations","url":"/docs/reference/typegate/prisma-migration/mutations#create","content":"Type: object_31! create field Policies: admin_only Arguments Name\tDescriptionapply Boolean! apply input field name String! name input field migrations String migrations input field runtime String runtime input field typegraph String! typegraph input field "},{"title":"deploy​","type":1,"pageTitle":"Mutations","url":"/docs/reference/typegate/prisma-migration/mutations#deploy","content":"Type: object_37! deploy field Policies: admin_only Arguments Name\tDescriptionmigrations String! migrations input field runtime String runtime input field typegraph String! typegraph input field "},{"title":"Changelog","type":0,"sectionRef":"#","url":"/docs/reference/changelog","content":"","keywords":""},{"title":"v0.0.3-dev.1 (1/24/2023)​","type":1,"pageTitle":"Changelog","url":"/docs/reference/changelog#v003-dev1-1242023","content":""},{"title":"What's Changed​","type":1,"pageTitle":"Changelog","url":"/docs/reference/changelog#whats-changed","content":""},{"title":"New features 🎉​","type":1,"pageTitle":"Changelog","url":"/docs/reference/changelog#new-features-","content":"Docs follow-up + refactoring by @zifeo in https://github.com/metatypedev/metatype/pull/54Refactor MET-51 handle better ffi crash by @afmika in https://github.com/metatypedev/metatype/pull/52Fix: TypeScript codegen by @Natoandro in https://github.com/metatypedev/metatype/pull/60(CLI) MET-57: Rewrite terminal documentation by @afmika in https://github.com/metatypedev/metatype/pull/61feat(meta-cli): link openssl statically by @msga-mmm in https://github.com/metatypedev/metatype/pull/65MET-86: Fix introspection by @Natoandro in https://github.com/metatypedev/metatype/pull/64feat MET-71: (GRAPH)Add policy.jwt by @afmika in https://github.com/metatypedev/metatype/pull/63Refactor, multiple fixes and add temporal runtime by @zifeo in https://github.com/metatypedev/metatype/pull/66 "},{"title":"New Contributors​","type":1,"pageTitle":"Changelog","url":"/docs/reference/changelog#new-contributors","content":"@msga-mmm made their first contribution in https://github.com/metatypedev/metatype/pull/65 Full Changelog: https://github.com/metatypedev/metatype/compare/v0.0.3-dev.0...v0.0.3-dev.1 "},{"title":"v0.0.3-dev.0 (1/14/2023)​","type":1,"pageTitle":"Changelog","url":"/docs/reference/changelog#v003-dev0-1142023","content":""},{"title":"What's Changed​","type":1,"pageTitle":"Changelog","url":"/docs/reference/changelog#whats-changed-1","content":""},{"title":"New features 🎉​","type":1,"pageTitle":"Changelog","url":"/docs/reference/changelog#new-features--1","content":"build: add dependabot by @zifeo in https://github.com/metatypedev/metatype/pull/9chore(deps-dev): bump flake8 from 5.0.4 to 6.0.0 in /website by @dependabot in https://github.com/metatypedev/metatype/pull/20chore(deps): bump docker/login-action from 1 to 2 by @dependabot in https://github.com/metatypedev/metatype/pull/13chore(deps): bump actions/checkout from 2 to 3 by @dependabot in https://github.com/metatypedev/metatype/pull/11chore: release improvement by @zifeo in https://github.com/metatypedev/metatype/pull/8chore(deps): bump pnpm/action-setup from 2.2.2 to 2.2.4 by @dependabot in https://github.com/metatypedev/metatype/pull/10chore(deps-dev): bump pytest-asyncio from 0.19.0 to 0.20.3 in /typegraph by @dependabot in https://github.com/metatypedev/metatype/pull/30chore(deps-dev): bump mypy from 0.982 to 0.991 in /typegraph by @dependabot in https://github.com/metatypedev/metatype/pull/26chore(deps): bump httpx from 0.22.0 to 0.23.3 in /typegraph by @dependabot in https://github.com/metatypedev/metatype/pull/25chore(deps): bump base64 from 0.13.1 to 0.20.0 by @dependabot in https://github.com/metatypedev/metatype/pull/29chore: upgrade rust deps by @zifeo in https://github.com/metatypedev/metatype/pull/31chore(deps): bump orjson from 3.8.4 to 3.8.5 in /typegraph by @dependabot in https://github.com/metatypedev/metatype/pull/33Add missing commands by @afmika in https://github.com/metatypedev/metatype/pull/47add changes to the doc by @afmika in https://github.com/metatypedev/metatype/pull/46feat(MET-38): Expose function inputs to the policy by @Natoandro in https://github.com/metatypedev/metatype/pull/4feat MET-12: Generate TypeScript type definitions from jsonschema by @Natoandro in https://github.com/metatypedev/metatype/pull/45Fix workflow for release by @Natoandro in https://github.com/metatypedev/metatype/pull/53 "},{"title":"New Contributors​","type":1,"pageTitle":"Changelog","url":"/docs/reference/changelog#new-contributors-1","content":"@afmika made their first contribution in https://github.com/metatypedev/metatype/pull/47@Natoandro made their first contribution in https://github.com/metatypedev/metatype/pull/4 Full Changelog: https://github.com/metatypedev/metatype/compare/v0.0.2-alpha.14...v0.0.3-dev.0 "},{"title":"v0.0.2-alpha.14 (1/7/2023)​","type":1,"pageTitle":"Changelog","url":"/docs/reference/changelog#v002-alpha14-172023","content":""},{"title":"What's Changed​","type":1,"pageTitle":"Changelog","url":"/docs/reference/changelog#whats-changed-2","content":""},{"title":"New features 🎉​","type":1,"pageTitle":"Changelog","url":"/docs/reference/changelog#new-features--2","content":"build: improve pipeline and refactor cache by @zifeo in https://github.com/metatypedev/metatype/pull/5chore(deps): bump tokio from 1.23.0 to 1.23.1 by @dependabot in https://github.com/metatypedev/metatype/pull/6chore: release a14 by @zifeo in https://github.com/metatypedev/metatype/pull/7 "},{"title":"New Contributors​","type":1,"pageTitle":"Changelog","url":"/docs/reference/changelog#new-contributors-2","content":"@zifeo made their first contribution in https://github.com/metatypedev/metatype/pull/5 Full Changelog: https://github.com/metatypedev/metatype/compare/v0.0.2-alpha.13...v0.0.2-alpha.14 "},{"title":"v0.0.2-alpha.13 (12/27/2022)​","type":1,"pageTitle":"Changelog","url":"/docs/reference/changelog#v002-alpha13-12272022","content":""},{"title":"What's Changed​","type":1,"pageTitle":"Changelog","url":"/docs/reference/changelog#whats-changed-3","content":""},{"title":"New features 🎉​","type":1,"pageTitle":"Changelog","url":"/docs/reference/changelog#new-features--3","content":"Bump certifi from 2022.9.24 to 2022.12.7 in /website by @dependabot in https://github.com/metatypedev/metatype/pull/2Bump certifi from 2022.9.24 to 2022.12.7 in /typegraph by @dependabot in https://github.com/metatypedev/metatype/pull/3 Full Changelog: https://github.com/metatypedev/metatype/commits/v0.0.2-alpha.13 "},{"title":"Objects","type":0,"sectionRef":"#","url":"/docs/reference/typegate/prisma-migration/objects","content":"","keywords":""},{"title":"object_16​","type":1,"pageTitle":"Objects","url":"/docs/reference/typegate/prisma-migration/objects#object_16","content":"object_16 type Fields Name\tDescriptionruntimeName String! runtimeName field Policies: inherit diff String diff field Policies: inherit "},{"title":"object_22​","type":1,"pageTitle":"Objects","url":"/docs/reference/typegate/prisma-migration/objects#object_22","content":"object_22 type Fields Name\tDescriptionappliedMigrations [String!]! appliedMigrations field Policies: inherit databaseReset Boolean! databaseReset field Policies: inherit "},{"title":"object_31​","type":1,"pageTitle":"Objects","url":"/docs/reference/typegate/prisma-migration/objects#object_31","content":"object_31 type Fields Name\tDescriptionruntimeName String! runtimeName field Policies: inherit migrations String! migrations field Policies: inherit appliedMigrations [String!]! appliedMigrations field Policies: inherit createdMigrationName String! createdMigrationName field Policies: inherit "},{"title":"object_37​","type":1,"pageTitle":"Objects","url":"/docs/reference/typegate/prisma-migration/objects#object_37","content":"object_37 type Fields Name\tDescriptionappliedMigrations [String!]! appliedMigrations field Policies: inherit migrationCount Int! migrationCount field Policies: inherit "},{"title":"Scalars","type":0,"sectionRef":"#","url":"/docs/reference/typegate/prisma-migration/scalars","content":"","keywords":""},{"title":"Boolean​","type":1,"pageTitle":"Scalars","url":"/docs/reference/typegate/prisma-migration/scalars#boolean","content":"The Boolean scalar type represents true or false. "},{"title":"Int​","type":1,"pageTitle":"Scalars","url":"/docs/reference/typegate/prisma-migration/scalars#int","content":"The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. "},{"title":"String​","type":1,"pageTitle":"Scalars","url":"/docs/reference/typegate/prisma-migration/scalars#string","content":"The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. "},{"title":"Mutations","type":0,"sectionRef":"#","url":"/docs/reference/typegate/typegate/mutations","content":"","keywords":""},{"title":"addTypegraph​","type":1,"pageTitle":"Mutations","url":"/docs/reference/typegate/typegate/mutations#addtypegraph","content":"Type: typegraph addTypegraph field Policies: admin_only Arguments Name\tDescriptionfromString String! fromString input field "},{"title":"removeTypegraph​","type":1,"pageTitle":"Mutations","url":"/docs/reference/typegate/typegate/mutations#removetypegraph","content":"Type: Int! removeTypegraph field Policies: admin_only Arguments Name\tDescriptionname String! name input field "},{"title":"Queries","type":0,"sectionRef":"#","url":"/docs/reference/typegate/prisma-migration/queries","content":"","keywords":""},{"title":"diff​","type":1,"pageTitle":"Queries","url":"/docs/reference/typegate/prisma-migration/queries#diff","content":"Type: object_16! diff field Policies: admin_only Arguments Name\tDescriptionscript Boolean! script input field runtime String runtime input field typegraph String! typegraph input field "},{"title":"Queries","type":0,"sectionRef":"#","url":"/docs/reference/typegate/typegate/queries","content":"","keywords":""},{"title":"typegraph​","type":1,"pageTitle":"Queries","url":"/docs/reference/typegate/typegate/queries#typegraph","content":"Type: typegraph typegraph field Policies: admin_only Arguments Name\tDescriptionname String! name input field "},{"title":"typegraphs​","type":1,"pageTitle":"Queries","url":"/docs/reference/typegate/typegate/queries#typegraphs","content":"Type: [typegraph!]! typegraphs field Policies: admin_only "},{"title":"Objects","type":0,"sectionRef":"#","url":"/docs/reference/typegate/typegate/objects","content":"","keywords":""},{"title":"typegraph​","type":1,"pageTitle":"Objects","url":"/docs/reference/typegate/typegate/objects#typegraph","content":"typegraph type Fields Name\tDescriptionurl String! url field Policies: inherit name String! name field Policies: inherit "},{"title":"Scalars","type":0,"sectionRef":"#","url":"/docs/reference/typegate/typegate/scalars","content":"","keywords":""},{"title":"Boolean​","type":1,"pageTitle":"Scalars","url":"/docs/reference/typegate/typegate/scalars#boolean","content":"The Boolean scalar type represents true or false. "},{"title":"Int​","type":1,"pageTitle":"Scalars","url":"/docs/reference/typegate/typegate/scalars#int","content":"The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. "},{"title":"String​","type":1,"pageTitle":"Scalars","url":"/docs/reference/typegate/typegate/scalars#string","content":"The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. "},{"title":"typegraph.providers.temporal.runtimes.temporal","type":0,"sectionRef":"#","url":"/docs/reference/typegraph/typegraph/providers/temporal/runtimes/temporal","content":"","keywords":""},{"title":"TemporalRuntime Objects​","type":1,"pageTitle":"typegraph.providers.temporal.runtimes.temporal","url":"/docs/reference/typegraph/typegraph/providers/temporal/runtimes/temporal#temporalruntime-objects","content":"@frozen class TemporalRuntime(Runtime)  Interacts with Temporal server. This runtime is experimental state and is subject to change. "},{"title":"typegraph.types","type":0,"sectionRef":"#","url":"/docs/reference/typegraph/typegraph/types","content":"","keywords":""},{"title":"number Objects​","type":1,"pageTitle":"typegraph.types","url":"/docs/reference/typegraph/typegraph/types#number-objects","content":"@with_constraints @frozen class number(typedef)  Represents a generic number. Arguments: _min float, optional - minimum constraint_max float, optional - maximum constraint_x_min float, optional - exclusive minimum constraint_x_max float, optional - exclusive maximum constraint_multiple_of float, optional - number must be a multiple of "},{"title":"integer Objects​","type":1,"pageTitle":"typegraph.types","url":"/docs/reference/typegraph/typegraph/types#integer-objects","content":"@frozen class integer(number)  An integer. "},{"title":"Adding more runtimes","type":0,"sectionRef":"#","url":"/docs/tutorials/adding-more-runtimes","content":"Adding more runtimes","keywords":""},{"title":"typegraph.runtimes.http","type":0,"sectionRef":"#","url":"/docs/reference/typegraph/typegraph/runtimes/http","content":"","keywords":""},{"title":"HTTPRuntime Objects​","type":1,"pageTitle":"typegraph.runtimes.http","url":"/docs/reference/typegraph/typegraph/runtimes/http#httpruntime-objects","content":"@frozen class HTTPRuntime(Runtime)  Runs HTTP requests. Example: from typegraph.runtime.http import HTTPRuntime remote = HTTPRuntime('https://dev.to/api') remote.get( '/test', t.struct({}), t.array(t.struct({'a': t.integer()})), )  "},{"title":"Getting started","type":0,"sectionRef":"#","url":"/docs/tutorials/getting-started","content":"","keywords":""},{"title":"Introduction​","type":1,"pageTitle":"Getting started","url":"/docs/tutorials/getting-started#introduction","content":"In this tutorial, you will write your first typegraph and deploy it on a typegate node using the Meta CLI. You will design some API blocks for a chat-based app where users can exchange messages and share products. Running the ecosystem requires Python &gt;= 3.8 which should be available on most the recent OS. Debian-based LinuxMacOSWindows sudo apt-get update sudo apt-get install python3 python3-pip python3-venv  No previous Python knowledge required. While the definition of typegraphs is currently done in Python, it doesn't require previous experience in Python. The tutorial covers all the basics and doesn't use advanced features of the language. "},{"title":"Quickstart with Metatype Cloud​","type":1,"pageTitle":"Getting started","url":"/docs/tutorials/getting-started#quickstart-with-metatype-cloud","content":"This is the easiest way to get started, yet it's not publicly accessible. You can sign-up for the private beta below.  "},{"title":"Quickstart with Docker​","type":1,"pageTitle":"Getting started","url":"/docs/tutorials/getting-started#quickstart-with-docker","content":""},{"title":"1. meta CLI​","type":1,"pageTitle":"Getting started","url":"/docs/tutorials/getting-started#1-meta-cli","content":"You can download the binary executable fromreleases page on Github, make it executable and add it to your $PATH or useeget to automate those steps. eget metatypedev/metatype --to $HOME/.local/bin meta --help meta upgrade  "},{"title":"2. typegraph package​","type":1,"pageTitle":"Getting started","url":"/docs/tutorials/getting-started#2-typegraph-package","content":"Create (and activate) the virtual environment (a local folder where you install the dependency of a project) for your project. Then install the typegraph package from PyPi using pip. python3 -m venv .venv source .venv/bin/activate pip3 install typegraph --upgrade python3 -c 'import typegraph; print(typegraph.version)'  "},{"title":"3. typegate node​","type":1,"pageTitle":"Getting started","url":"/docs/tutorials/getting-started#3-typegate-node","content":"Finally download and launch a docker-compose manifest running a typegate node, a Redis instance (this is the sole dependency of the typegate) and a Postgres instance to store the app's messages. curl -fsSL https://raw.githubusercontent.com/metatypedev/metatype/main/examples/docker-compose.yml -o docker-compose.yml docker compose up curl -X POST http://localhost:7890/typegate \\ -H 'Authorization: Basic YWRtaW46cGFzc3dvcmQ=' \\ --data '{&quot;query&quot;:&quot;query list { typegraphs { name }}&quot;}'  And go the next section. "},{"title":"Source installation​","type":1,"pageTitle":"Getting started","url":"/docs/tutorials/getting-started#source-installation","content":"Alternatively, you can install directly the typegraph package and the CLI from the Github repository (useful to check out unreleased features). pip3 install --upgrade git+https://github.com/metatypedev/metatype#subdirectory=typegraph cargo install --force meta-cli --git https://github.com/metatypedev/metatype  "},{"title":"Your first typegraph","type":0,"sectionRef":"#","url":"/docs/tutorials/your-first-typegraph","content":"","keywords":""},{"title":"Describing types​","type":1,"pageTitle":"Your first typegraph","url":"/docs/tutorials/your-first-typegraph#describing-types","content":"There is no such thing like a &quot;class&quot; type or &quot;primitive&quot; types but there are 4 categories: value types: t.integer(), t.string(), t.uuid(), etc.quantifier types: t.optional(·), t.array(·), etc.consolidator types: t.struct(·, ·), t.union(·, ·), etc.function types: t.func(· → ·), t.gen(→ ·), etc. This allows to describe almost any data type you may encounter, and verify the data format. t.struct({ &quot;name&quot;: t.string(), &quot;age&quot;: t.optional(t.integer()), &quot;messages&quot;: t.array(t.struct({ &quot;text&quot;: t.string(), &quot;sentAt&quot;: t.datetime() })) }) # will let the following pass { &quot;name&quot;: &quot;Alan&quot;, &quot;age&quot;: null, &quot;messages&quot;: [ { &quot;text&quot;: &quot;Hello!&quot;, &quot;sentAt&quot;: &quot;2022-12-28T01:11:10Z&quot; } ] } # and will reject { &quot;name&quot;: &quot;Turing&quot;, &quot;messages&quot;: [ { &quot;sentAt&quot;: 1 } ] }  "},{"title":"Describing graphs​","type":1,"pageTitle":"Your first typegraph","url":"/docs/tutorials/your-first-typegraph#describing-graphs","content":"first-typegraph.py from typegraph import policies from typegraph import t from typegraph import TypeGraph from typegraph.runtimes.graphql import GraphQLRuntime with TypeGraph(&quot;mini2&quot;) as g: remote = GraphQLRuntime(&quot;https://graphqlzero.almansi.me/api&quot;) allow_all = policies.allow_all() post = t.struct( { &quot;id&quot;: t.integer(), &quot;title&quot;: t.string(), &quot;body&quot;: t.string(), } ).named(&quot;Post&quot;) getter = remote.query(t.struct({&quot;id&quot;: t.integer()}), t.optional(post)).add_policy( allow_all ) g.expose(post=getter)  Loading... from typegraph import t # all types from typegraph import m # core materializer from typegraph.providers.XXX import XXX #  "},{"title":"API gateway vs API mesh","type":0,"sectionRef":"#","url":"/use-cases/api-gateway","content":"API gateway vs API mesh","keywords":""},{"title":"Backend for frontend","type":0,"sectionRef":"#","url":"/use-cases/backend-for-frontend","content":"Backend for frontend","keywords":""},{"title":"End to end typing","type":0,"sectionRef":"#","url":"/use-cases/end-to-end-typing","content":"End to end typing","keywords":""}]